[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar Random = Package.random.Random;\nvar OAuth = Package.oauth.OAuth;\nvar Oauth = Package.oauth.Oauth;\nvar ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////\n//                                                                         //\n// packages/oauth2/packages/oauth2.js                                      //\n//                                                                         //\n/////////////////////////////////////////////////////////////////////////////\n                                                                           //\n(function(){                                                               // 1\n                                                                           // 2\n///////////////////////////////////////////////////////////////////////    // 3\n//                                                                   //    // 4\n// packages/oauth2/oauth2_server.js                                  //    // 5\n//                                                                   //    // 6\n///////////////////////////////////////////////////////////////////////    // 7\n                                                                     //    // 8\n// connect middleware                                                // 1  // 9\nOAuth._requestHandlers['2'] = function (service, query, res) {       // 2  // 10\n  // check if user authorized access                                 // 3  // 11\n  if (!query.error) {                                                // 4  // 12\n    // Prepare the login results before returning.                   // 5  // 13\n                                                                     // 6  // 14\n    // Run service-specific handler.                                 // 7  // 15\n    var oauthResult = service.handleOauthRequest(query);             // 8  // 16\n    var credentialSecret = Random.secret();                          // 9  // 17\n                                                                     // 10\n    var credentialToken = OAuth._credentialTokenFromQuery(query);    // 11\n                                                                     // 12\n    // Store the login result so it can be retrieved in another      // 13\n    // browser tab by the result handler                             // 14\n    OAuth._storePendingCredential(credentialToken, {                 // 15\n      serviceName: service.serviceName,                              // 16\n      serviceData: oauthResult.serviceData,                          // 17\n      options: oauthResult.options                                   // 18\n    }, credentialSecret);                                            // 19\n  }                                                                  // 20\n                                                                     // 21\n  // Either close the window, redirect, or render nothing            // 22\n  // if all else fails                                               // 23\n  OAuth._renderOauthResults(res, query, credentialSecret);           // 24\n};                                                                   // 25\n                                                                     // 26\n///////////////////////////////////////////////////////////////////////    // 35\n                                                                           // 36\n}).call(this);                                                             // 37\n                                                                           // 38\n/////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage.oauth2 = {};\n\n})();\n","servePath":"/packages/oauth2.js","sourceMap":{"version":3,"sources":["/packages/oauth2/packages/oauth2.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gF","file":"/packages/oauth2.js","sourcesContent":["(function(){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/oauth2/oauth2_server.js                                  //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\n// connect middleware                                                // 1\nOAuth._requestHandlers['2'] = function (service, query, res) {       // 2\n  // check if user authorized access                                 // 3\n  if (!query.error) {                                                // 4\n    // Prepare the login results before returning.                   // 5\n                                                                     // 6\n    // Run service-specific handler.                                 // 7\n    var oauthResult = service.handleOauthRequest(query);             // 8\n    var credentialSecret = Random.secret();                          // 9\n                                                                     // 10\n    var credentialToken = OAuth._credentialTokenFromQuery(query);    // 11\n                                                                     // 12\n    // Store the login result so it can be retrieved in another      // 13\n    // browser tab by the result handler                             // 14\n    OAuth._storePendingCredential(credentialToken, {                 // 15\n      serviceName: service.serviceName,                              // 16\n      serviceData: oauthResult.serviceData,                          // 17\n      options: oauthResult.options                                   // 18\n    }, credentialSecret);                                            // 19\n  }                                                                  // 20\n                                                                     // 21\n  // Either close the window, redirect, or render nothing            // 22\n  // if all else fails                                               // 23\n  OAuth._renderOauthResults(res, query, credentialSecret);           // 24\n};                                                                   // 25\n                                                                     // 26\n///////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]