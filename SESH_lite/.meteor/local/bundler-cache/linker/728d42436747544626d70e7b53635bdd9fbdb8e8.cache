[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar _ = Package.underscore._;\nvar Reload = Package.reload.Reload;\nvar Base64 = Package.base64.Base64;\nvar URL = Package.url.URL;\n\n/* Package-scope variables */\nvar OAuth, Oauth;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                             //\n// packages/oauth/packages/oauth.js                                                            //\n//                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                               //\n(function(){                                                                                   // 1\n                                                                                               // 2\n//////////////////////////////////////////////////////////////////////////////////////////     // 3\n//                                                                                      //     // 4\n// packages/oauth/oauth_client.js                                                       //     // 5\n//                                                                                      //     // 6\n//////////////////////////////////////////////////////////////////////////////////////////     // 7\n                                                                                        //     // 8\n// credentialToken -> credentialSecret. You must provide both the                       // 1   // 9\n// credentialToken and the credentialSecret to retrieve an access token from            // 2   // 10\n// the _pendingCredentials collection.                                                  // 3   // 11\nvar credentialSecrets = {};                                                             // 4   // 12\n                                                                                        // 5   // 13\nOAuth = {};                                                                             // 6   // 14\n                                                                                        // 7   // 15\nOAuth.showPopup = function (url, callback, dimensions) {                                // 8   // 16\n  throw new Error(\"OAuth.showPopup must be implemented on this arch.\");                 // 9   // 17\n};                                                                                      // 10  // 18\n                                                                                        // 11  // 19\n// Determine the login style (popup or redirect) for this login flow.                   // 12  // 20\n//                                                                                      // 13  // 21\n//                                                                                      // 14  // 22\nOAuth._loginStyle = function (service, config, options) {                               // 15  // 23\n                                                                                        // 16  // 24\n  if (Meteor.isCordova) {                                                               // 17  // 25\n    return \"popup\";                                                                     // 18  // 26\n  }                                                                                     // 19  // 27\n                                                                                        // 20  // 28\n  var loginStyle = (options && options.loginStyle) || config.loginStyle || 'popup';     // 21  // 29\n                                                                                        // 22  // 30\n  if (! _.contains([\"popup\", \"redirect\"], loginStyle))                                  // 23  // 31\n    throw new Error(\"Invalid login style: \" + loginStyle);                              // 24  // 32\n                                                                                        // 25  // 33\n  // If we don't have session storage (for example, Safari in private                   // 26  // 34\n  // mode), the redirect login flow won't work, so fallback to the                      // 27  // 35\n  // popup style.                                                                       // 28  // 36\n  if (loginStyle === 'redirect') {                                                      // 29  // 37\n    try {                                                                               // 30  // 38\n      sessionStorage.setItem('Meteor.oauth.test', 'test');                              // 31  // 39\n      sessionStorage.removeItem('Meteor.oauth.test');                                   // 32  // 40\n    } catch (e) {                                                                       // 33  // 41\n      loginStyle = 'popup';                                                             // 34  // 42\n    }                                                                                   // 35  // 43\n  }                                                                                     // 36  // 44\n                                                                                        // 37  // 45\n  return loginStyle;                                                                    // 38  // 46\n};                                                                                      // 39  // 47\n                                                                                        // 40  // 48\nOAuth._stateParam = function (loginStyle, credentialToken, redirectUrl) {               // 41  // 49\n  var state = {                                                                         // 42  // 50\n    loginStyle: loginStyle,                                                             // 43  // 51\n    credentialToken: credentialToken,                                                   // 44  // 52\n    isCordova: Meteor.isCordova                                                         // 45  // 53\n  };                                                                                    // 46  // 54\n                                                                                        // 47  // 55\n  if (loginStyle === 'redirect')                                                        // 48  // 56\n    state.redirectUrl = redirectUrl || ('' + window.location);                          // 49  // 57\n                                                                                        // 50  // 58\n  // Encode base64 as not all login services URI-encode the state                       // 51  // 59\n  // parameter when they pass it back to us.                                            // 52  // 60\n  // Use the 'base64' package here because 'btoa' isn't supported in IE8/9.             // 53  // 61\n  return Base64.encode(JSON.stringify(state));                                          // 54  // 62\n};                                                                                      // 55  // 63\n                                                                                        // 56  // 64\n                                                                                        // 57  // 65\n// At the beginning of the redirect login flow, before we redirect to                   // 58  // 66\n// the login service, save the credential token for this login attempt                  // 59  // 67\n// in the reload migration data.                                                        // 60  // 68\n//                                                                                      // 61  // 69\nOAuth.saveDataForRedirect = function (loginService, credentialToken) {                  // 62  // 70\n  Reload._onMigrate('oauth', function () {                                              // 63  // 71\n    return [true, {loginService: loginService, credentialToken: credentialToken}];      // 64  // 72\n  });                                                                                   // 65  // 73\n  Reload._migrate(null, {immediateMigration: true});                                    // 66  // 74\n};                                                                                      // 67  // 75\n                                                                                        // 68  // 76\n// At the end of the redirect login flow, when we've redirected back                    // 69  // 77\n// to the application, retrieve the credentialToken and (if the login                   // 70  // 78\n// was successful) the credentialSecret.                                                // 71  // 79\n//                                                                                      // 72  // 80\n// Called at application startup.  Returns null if this is normal                       // 73  // 81\n// application startup and we weren't just redirected at the end of                     // 74  // 82\n// the login flow.                                                                      // 75  // 83\n//                                                                                      // 76  // 84\nOAuth.getDataAfterRedirect = function () {                                              // 77  // 85\n  var migrationData = Reload._migrationData('oauth');                                   // 78  // 86\n                                                                                        // 79  // 87\n  if (! (migrationData && migrationData.credentialToken))                               // 80  // 88\n    return null;                                                                        // 81  // 89\n                                                                                        // 82  // 90\n  var credentialToken = migrationData.credentialToken;                                  // 83  // 91\n  var key = OAuth._storageTokenPrefix + credentialToken;                                // 84  // 92\n  var credentialSecret;                                                                 // 85  // 93\n  try {                                                                                 // 86  // 94\n    credentialSecret = sessionStorage.getItem(key);                                     // 87  // 95\n    sessionStorage.removeItem(key);                                                     // 88  // 96\n  } catch (e) {                                                                         // 89  // 97\n    Meteor._debug('error retrieving credentialSecret', e);                              // 90  // 98\n  }                                                                                     // 91  // 99\n  return {                                                                              // 92  // 100\n    loginService: migrationData.loginService,                                           // 93  // 101\n    credentialToken: credentialToken,                                                   // 94  // 102\n    credentialSecret: credentialSecret                                                  // 95  // 103\n  };                                                                                    // 96  // 104\n};                                                                                      // 97  // 105\n                                                                                        // 98  // 106\n// Launch an OAuth login flow.  For the popup login style, show the                     // 99  // 107\n// popup.  For the redirect login style, save the credential token for                  // 100\n// this login attempt in the reload migration data, and redirect to                     // 101\n// the service for the login.                                                           // 102\n//                                                                                      // 103\n// options:                                                                             // 104\n//  loginService: \"facebook\", \"google\", etc.                                            // 105\n//  loginStyle: \"popup\" or \"redirect\"                                                   // 106\n//  loginUrl: The URL at the login service provider to start the OAuth flow.            // 107\n//  credentialRequestCompleteCallback: for the popup flow, call when the popup          // 108\n//    is closed and we have the credential from the login service.                      // 109\n//  credentialToken: our identifier for this login flow.                                // 110\n//                                                                                      // 111\nOAuth.launchLogin = function (options) {                                                // 112\n  if (! options.loginService)                                                           // 113\n    throw new Error('loginService required');                                           // 114\n  if (options.loginStyle === 'popup') {                                                 // 115\n    OAuth.showPopup(                                                                    // 116\n      options.loginUrl,                                                                 // 117\n      _.bind(options.credentialRequestCompleteCallback, null, options.credentialToken),        // 126\n      options.popupOptions);                                                            // 119\n  } else if (options.loginStyle === 'redirect') {                                       // 120\n    OAuth.saveDataForRedirect(options.loginService, options.credentialToken);           // 121\n    window.location = options.loginUrl;                                                 // 122\n  } else {                                                                              // 123\n    throw new Error('invalid login style');                                             // 124\n  }                                                                                     // 125\n};                                                                                      // 126\n                                                                                        // 127\n// XXX COMPAT WITH 0.7.0.1                                                              // 128\n// Private interface but probably used by many oauth clients in atmosphere.             // 129\nOAuth.initiateLogin = function (credentialToken, url, callback, dimensions) {           // 130\n  OAuth.showPopup(                                                                      // 131\n    url,                                                                                // 132\n    _.bind(callback, null, credentialToken),                                            // 133\n    dimensions                                                                          // 134\n  );                                                                                    // 135\n};                                                                                      // 136\n                                                                                        // 137\n// Called by the popup when the OAuth flow is completed, right before                   // 138\n// the popup closes.                                                                    // 139\nOAuth._handleCredentialSecret = function (credentialToken, secret) {                    // 140\n  check(credentialToken, String);                                                       // 141\n  check(secret, String);                                                                // 142\n  if (! _.has(credentialSecrets,credentialToken)) {                                     // 143\n    credentialSecrets[credentialToken] = secret;                                        // 144\n  } else {                                                                              // 145\n    throw new Error(\"Duplicate credential token from OAuth login\");                     // 146\n  }                                                                                     // 147\n};                                                                                      // 148\n                                                                                        // 149\n// Used by accounts-oauth, which needs both a credentialToken and the                   // 150\n// corresponding to credential secret to call the `login` method over DDP.              // 151\nOAuth._retrieveCredentialSecret = function (credentialToken) {                          // 152\n  // First check the secrets collected by OAuth._handleCredentialSecret,                // 153\n  // then check localStorage. This matches what we do in                                // 154\n  // end_of_login_response.html.                                                        // 155\n  var secret = credentialSecrets[credentialToken];                                      // 156\n  if (! secret) {                                                                       // 157\n    var localStorageKey = OAuth._storageTokenPrefix + credentialToken;                  // 158\n    secret = Meteor._localStorage.getItem(localStorageKey);                             // 159\n    Meteor._localStorage.removeItem(localStorageKey);                                   // 160\n  } else {                                                                              // 161\n    delete credentialSecrets[credentialToken];                                          // 162\n  }                                                                                     // 163\n  return secret;                                                                        // 164\n};                                                                                      // 165\n                                                                                        // 166\n//////////////////////////////////////////////////////////////////////////////////////////     // 175\n                                                                                               // 176\n}).call(this);                                                                                 // 177\n                                                                                               // 178\n                                                                                               // 179\n                                                                                               // 180\n                                                                                               // 181\n                                                                                               // 182\n                                                                                               // 183\n(function(){                                                                                   // 184\n                                                                                               // 185\n//////////////////////////////////////////////////////////////////////////////////////////     // 186\n//                                                                                      //     // 187\n// packages/oauth/oauth_browser.js                                                      //     // 188\n//                                                                                      //     // 189\n//////////////////////////////////////////////////////////////////////////////////////////     // 190\n                                                                                        //     // 191\n// Browser specific code for the OAuth package.                                         // 1   // 192\n                                                                                        // 2   // 193\n// Open a popup window, centered on the screen, and call a callback when it             // 3   // 194\n// closes.                                                                              // 4   // 195\n//                                                                                      // 5   // 196\n// @param url {String} url to show                                                      // 6   // 197\n// @param callback {Function} Callback function to call on completion. Takes no         // 7   // 198\n//   arguments.                                                                         // 8   // 199\n// @param dimensions {optional Object(width, height)} The dimensions of                 // 9   // 200\n//   the popup. If not passed defaults to something sane.                               // 10  // 201\nOAuth.showPopup = function (url, callback, dimensions) {                                // 11  // 202\n  // default dimensions that worked well for facebook and google                        // 12  // 203\n  var popup = openCenteredPopup(                                                        // 13  // 204\n    url,                                                                                // 14  // 205\n    (dimensions && dimensions.width) || 650,                                            // 15  // 206\n    (dimensions && dimensions.height) || 331                                            // 16  // 207\n  );                                                                                    // 17  // 208\n                                                                                        // 18  // 209\n  var checkPopupOpen = setInterval(function() {                                         // 19  // 210\n    try {                                                                               // 20  // 211\n      // Fix for #328 - added a second test criteria (popup.closed === undefined)       // 21  // 212\n      // to humour this Android quirk:                                                  // 22  // 213\n      // http://code.google.com/p/android/issues/detail?id=21061                        // 23  // 214\n      var popupClosed = popup.closed || popup.closed === undefined;                     // 24  // 215\n    } catch (e) {                                                                       // 25  // 216\n      // For some unknown reason, IE9 (and others?) sometimes (when                     // 26  // 217\n      // the popup closes too quickly?) throws \"SCRIPT16386: No such                    // 27  // 218\n      // interface supported\" when trying to read 'popup.closed'. Try                   // 28  // 219\n      // again in 100ms.                                                                // 29  // 220\n      return;                                                                           // 30  // 221\n    }                                                                                   // 31  // 222\n                                                                                        // 32  // 223\n    if (popupClosed) {                                                                  // 33  // 224\n      clearInterval(checkPopupOpen);                                                    // 34  // 225\n      callback();                                                                       // 35  // 226\n    }                                                                                   // 36  // 227\n  }, 100);                                                                              // 37  // 228\n};                                                                                      // 38  // 229\n                                                                                        // 39  // 230\nvar openCenteredPopup = function(url, width, height) {                                  // 40  // 231\n  var screenX = typeof window.screenX !== 'undefined'                                   // 41  // 232\n        ? window.screenX : window.screenLeft;                                           // 42  // 233\n  var screenY = typeof window.screenY !== 'undefined'                                   // 43  // 234\n        ? window.screenY : window.screenTop;                                            // 44  // 235\n  var outerWidth = typeof window.outerWidth !== 'undefined'                             // 45  // 236\n        ? window.outerWidth : document.body.clientWidth;                                // 46  // 237\n  var outerHeight = typeof window.outerHeight !== 'undefined'                           // 47  // 238\n        ? window.outerHeight : (document.body.clientHeight - 22);                       // 48  // 239\n  // XXX what is the 22?                                                                // 49  // 240\n                                                                                        // 50  // 241\n  // Use `outerWidth - width` and `outerHeight - height` for help in                    // 51  // 242\n  // positioning the popup centered relative to the current window                      // 52  // 243\n  var left = screenX + (outerWidth - width) / 2;                                        // 53  // 244\n  var top = screenY + (outerHeight - height) / 2;                                       // 54  // 245\n  var features = ('width=' + width + ',height=' + height +                              // 55  // 246\n                  ',left=' + left + ',top=' + top + ',scrollbars=yes');                 // 56  // 247\n                                                                                        // 57  // 248\n  var newwindow = window.open(url, 'Login', features);                                  // 58  // 249\n                                                                                        // 59  // 250\n  if (typeof newwindow === 'undefined') {                                               // 60  // 251\n    // blocked by a popup blocker maybe?                                                // 61  // 252\n    var err = new Error(\"The login popup was blocked by the browser\");                  // 62  // 253\n    err.attemptedUrl = url;                                                             // 63  // 254\n    throw err;                                                                          // 64  // 255\n  }                                                                                     // 65  // 256\n                                                                                        // 66  // 257\n  if (newwindow.focus)                                                                  // 67  // 258\n    newwindow.focus();                                                                  // 68  // 259\n                                                                                        // 69  // 260\n  return newwindow;                                                                     // 70  // 261\n};                                                                                      // 71  // 262\n//////////////////////////////////////////////////////////////////////////////////////////     // 263\n                                                                                               // 264\n}).call(this);                                                                                 // 265\n                                                                                               // 266\n                                                                                               // 267\n                                                                                               // 268\n                                                                                               // 269\n                                                                                               // 270\n                                                                                               // 271\n(function(){                                                                                   // 272\n                                                                                               // 273\n//////////////////////////////////////////////////////////////////////////////////////////     // 274\n//                                                                                      //     // 275\n// packages/oauth/oauth_common.js                                                       //     // 276\n//                                                                                      //     // 277\n//////////////////////////////////////////////////////////////////////////////////////////     // 278\n                                                                                        //     // 279\nOAuth._storageTokenPrefix = \"Meteor.oauth.credentialSecret-\";                           // 1   // 280\n                                                                                        // 2   // 281\nOAuth._redirectUri = function (serviceName, config, params, absoluteUrlOptions) {       // 3   // 282\n  // XXX COMPAT WITH 0.9.0                                                              // 4   // 283\n  // The redirect URI used to have a \"?close\" query argument.  We                       // 5   // 284\n  // detect whether we need to be backwards compatible by checking for                  // 6   // 285\n  // the absence of the `loginStyle` field, which wasn't used in the                    // 7   // 286\n  // code which had the \"?close\" argument.                                              // 8   // 287\n  // This logic is duplicated in the tool so that the tool can do OAuth                 // 9   // 288\n  // flow with <= 0.9.0 servers (tools/auth.js).                                        // 10  // 289\n  var query = config.loginStyle ? null : \"close\";                                       // 11  // 290\n                                                                                        // 12  // 291\n  // Clone because we're going to mutate 'params'. The 'cordova' and                    // 13  // 292\n  // 'android' parameters are only used for picking the host of the                     // 14  // 293\n  // redirect URL, and not actually included in the redirect URL itself.                // 15  // 294\n  var isCordova = false;                                                                // 16  // 295\n  var isAndroid = false;                                                                // 17  // 296\n  if (params) {                                                                         // 18  // 297\n    params = _.clone(params);                                                           // 19  // 298\n    isCordova = params.cordova;                                                         // 20  // 299\n    isAndroid = params.android;                                                         // 21  // 300\n    delete params.cordova;                                                              // 22  // 301\n    delete params.android;                                                              // 23  // 302\n    if (_.isEmpty(params)) {                                                            // 24  // 303\n      params = undefined;                                                               // 25  // 304\n    }                                                                                   // 26  // 305\n  }                                                                                     // 27  // 306\n                                                                                        // 28  // 307\n  if (Meteor.isServer && isCordova) {                                                   // 29  // 308\n    var rootUrl = process.env.MOBILE_ROOT_URL ||                                        // 30  // 309\n          __meteor_runtime_config__.ROOT_URL;                                           // 31  // 310\n                                                                                        // 32  // 311\n    if (isAndroid) {                                                                    // 33  // 312\n      // Match the replace that we do in cordova boilerplate                            // 34  // 313\n      // (boilerplate-generator package).                                               // 35  // 314\n      // XXX Maybe we should put this in a separate package or something                // 36  // 315\n      // that is used here and by boilerplate-generator? Or maybe                       // 37  // 316\n      // `Meteor.absoluteUrl` should know how to do this?                               // 38  // 317\n      var url = Npm.require(\"url\");                                                     // 39  // 318\n      var parsedRootUrl = url.parse(rootUrl);                                           // 40  // 319\n      if (parsedRootUrl.hostname === \"localhost\") {                                     // 41  // 320\n        parsedRootUrl.hostname = \"10.0.2.2\";                                            // 42  // 321\n        delete parsedRootUrl.host;                                                      // 43  // 322\n      }                                                                                 // 44  // 323\n      rootUrl = url.format(parsedRootUrl);                                              // 45  // 324\n    }                                                                                   // 46  // 325\n                                                                                        // 47  // 326\n    absoluteUrlOptions = _.extend({}, absoluteUrlOptions, {                             // 48  // 327\n      // For Cordova clients, redirect to the special Cordova root url                  // 49  // 328\n      // (likely a local IP in development mode).                                       // 50  // 329\n      rootUrl: rootUrl                                                                  // 51  // 330\n    });                                                                                 // 52  // 331\n  }                                                                                     // 53  // 332\n                                                                                        // 54  // 333\n  return URL._constructUrl(                                                             // 55  // 334\n    Meteor.absoluteUrl('_oauth/' + serviceName, absoluteUrlOptions),                    // 56  // 335\n    query,                                                                              // 57  // 336\n    params);                                                                            // 58  // 337\n};                                                                                      // 59  // 338\n                                                                                        // 60  // 339\n//////////////////////////////////////////////////////////////////////////////////////////     // 340\n                                                                                               // 341\n}).call(this);                                                                                 // 342\n                                                                                               // 343\n                                                                                               // 344\n                                                                                               // 345\n                                                                                               // 346\n                                                                                               // 347\n                                                                                               // 348\n(function(){                                                                                   // 349\n                                                                                               // 350\n//////////////////////////////////////////////////////////////////////////////////////////     // 351\n//                                                                                      //     // 352\n// packages/oauth/deprecated.js                                                         //     // 353\n//                                                                                      //     // 354\n//////////////////////////////////////////////////////////////////////////////////////////     // 355\n                                                                                        //     // 356\n// XXX COMPAT WITH 0.8.0                                                                // 1   // 357\n                                                                                        // 2   // 358\nOauth = OAuth;                                                                          // 3   // 359\n                                                                                        // 4   // 360\n//////////////////////////////////////////////////////////////////////////////////////////     // 361\n                                                                                               // 362\n}).call(this);                                                                                 // 363\n                                                                                               // 364\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage.oauth = {\n  OAuth: OAuth,\n  Oauth: Oauth\n};\n\n})();\n","servePath":"/packages/oauth.js","sourceMap":{"version":3,"sources":["/packages/oauth/packages/oauth.js"],"names":[],"mappingsqG","file":"/packages/oauth.js","sourcesContent":["(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                      //\n// packages/oauth/oauth_client.js                                                       //\n//                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////\n                                                                                        //\n// credentialToken -> credentialSecret. You must provide both the                       // 1\n// credentialToken and the credentialSecret to retrieve an access token from            // 2\n// the _pendingCredentials collection.                                                  // 3\nvar credentialSecrets = {};                                                             // 4\n                                                                                        // 5\nOAuth = {};                                                                             // 6\n                                                                                        // 7\nOAuth.showPopup = function (url, callback, dimensions) {                                // 8\n  throw new Error(\"OAuth.showPopup must be implemented on this arch.\");                 // 9\n};                                                                                      // 10\n                                                                                        // 11\n// Determine the login style (popup or redirect) for this login flow.                   // 12\n//                                                                                      // 13\n//                                                                                      // 14\nOAuth._loginStyle = function (service, config, options) {                               // 15\n                                                                                        // 16\n  if (Meteor.isCordova) {                                                               // 17\n    return \"popup\";                                                                     // 18\n  }                                                                                     // 19\n                                                                                        // 20\n  var loginStyle = (options && options.loginStyle) || config.loginStyle || 'popup';     // 21\n                                                                                        // 22\n  if (! _.contains([\"popup\", \"redirect\"], loginStyle))                                  // 23\n    throw new Error(\"Invalid login style: \" + loginStyle);                              // 24\n                                                                                        // 25\n  // If we don't have session storage (for example, Safari in private                   // 26\n  // mode), the redirect login flow won't work, so fallback to the                      // 27\n  // popup style.                                                                       // 28\n  if (loginStyle === 'redirect') {                                                      // 29\n    try {                                                                               // 30\n      sessionStorage.setItem('Meteor.oauth.test', 'test');                              // 31\n      sessionStorage.removeItem('Meteor.oauth.test');                                   // 32\n    } catch (e) {                                                                       // 33\n      loginStyle = 'popup';                                                             // 34\n    }                                                                                   // 35\n  }                                                                                     // 36\n                                                                                        // 37\n  return loginStyle;                                                                    // 38\n};                                                                                      // 39\n                                                                                        // 40\nOAuth._stateParam = function (loginStyle, credentialToken, redirectUrl) {               // 41\n  var state = {                                                                         // 42\n    loginStyle: loginStyle,                                                             // 43\n    credentialToken: credentialToken,                                                   // 44\n    isCordova: Meteor.isCordova                                                         // 45\n  };                                                                                    // 46\n                                                                                        // 47\n  if (loginStyle === 'redirect')                                                        // 48\n    state.redirectUrl = redirectUrl || ('' + window.location);                          // 49\n                                                                                        // 50\n  // Encode base64 as not all login services URI-encode the state                       // 51\n  // parameter when they pass it back to us.                                            // 52\n  // Use the 'base64' package here because 'btoa' isn't supported in IE8/9.             // 53\n  return Base64.encode(JSON.stringify(state));                                          // 54\n};                                                                                      // 55\n                                                                                        // 56\n                                                                                        // 57\n// At the beginning of the redirect login flow, before we redirect to                   // 58\n// the login service, save the credential token for this login attempt                  // 59\n// in the reload migration data.                                                        // 60\n//                                                                                      // 61\nOAuth.saveDataForRedirect = function (loginService, credentialToken) {                  // 62\n  Reload._onMigrate('oauth', function () {                                              // 63\n    return [true, {loginService: loginService, credentialToken: credentialToken}];      // 64\n  });                                                                                   // 65\n  Reload._migrate(null, {immediateMigration: true});                                    // 66\n};                                                                                      // 67\n                                                                                        // 68\n// At the end of the redirect login flow, when we've redirected back                    // 69\n// to the application, retrieve the credentialToken and (if the login                   // 70\n// was successful) the credentialSecret.                                                // 71\n//                                                                                      // 72\n// Called at application startup.  Returns null if this is normal                       // 73\n// application startup and we weren't just redirected at the end of                     // 74\n// the login flow.                                                                      // 75\n//                                                                                      // 76\nOAuth.getDataAfterRedirect = function () {                                              // 77\n  var migrationData = Reload._migrationData('oauth');                                   // 78\n                                                                                        // 79\n  if (! (migrationData && migrationData.credentialToken))                               // 80\n    return null;                                                                        // 81\n                                                                                        // 82\n  var credentialToken = migrationData.credentialToken;                                  // 83\n  var key = OAuth._storageTokenPrefix + credentialToken;                                // 84\n  var credentialSecret;                                                                 // 85\n  try {                                                                                 // 86\n    credentialSecret = sessionStorage.getItem(key);                                     // 87\n    sessionStorage.removeItem(key);                                                     // 88\n  } catch (e) {                                                                         // 89\n    Meteor._debug('error retrieving credentialSecret', e);                              // 90\n  }                                                                                     // 91\n  return {                                                                              // 92\n    loginService: migrationData.loginService,                                           // 93\n    credentialToken: credentialToken,                                                   // 94\n    credentialSecret: credentialSecret                                                  // 95\n  };                                                                                    // 96\n};                                                                                      // 97\n                                                                                        // 98\n// Launch an OAuth login flow.  For the popup login style, show the                     // 99\n// popup.  For the redirect login style, save the credential token for                  // 100\n// this login attempt in the reload migration data, and redirect to                     // 101\n// the service for the login.                                                           // 102\n//                                                                                      // 103\n// options:                                                                             // 104\n//  loginService: \"facebook\", \"google\", etc.                                            // 105\n//  loginStyle: \"popup\" or \"redirect\"                                                   // 106\n//  loginUrl: The URL at the login service provider to start the OAuth flow.            // 107\n//  credentialRequestCompleteCallback: for the popup flow, call when the popup          // 108\n//    is closed and we have the credential from the login service.                      // 109\n//  credentialToken: our identifier for this login flow.                                // 110\n//                                                                                      // 111\nOAuth.launchLogin = function (options) {                                                // 112\n  if (! options.loginService)                                                           // 113\n    throw new Error('loginService required');                                           // 114\n  if (options.loginStyle === 'popup') {                                                 // 115\n    OAuth.showPopup(                                                                    // 116\n      options.loginUrl,                                                                 // 117\n      _.bind(options.credentialRequestCompleteCallback, null, options.credentialToken),\n      options.popupOptions);                                                            // 119\n  } else if (options.loginStyle === 'redirect') {                                       // 120\n    OAuth.saveDataForRedirect(options.loginService, options.credentialToken);           // 121\n    window.location = options.loginUrl;                                                 // 122\n  } else {                                                                              // 123\n    throw new Error('invalid login style');                                             // 124\n  }                                                                                     // 125\n};                                                                                      // 126\n                                                                                        // 127\n// XXX COMPAT WITH 0.7.0.1                                                              // 128\n// Private interface but probably used by many oauth clients in atmosphere.             // 129\nOAuth.initiateLogin = function (credentialToken, url, callback, dimensions) {           // 130\n  OAuth.showPopup(                                                                      // 131\n    url,                                                                                // 132\n    _.bind(callback, null, credentialToken),                                            // 133\n    dimensions                                                                          // 134\n  );                                                                                    // 135\n};                                                                                      // 136\n                                                                                        // 137\n// Called by the popup when the OAuth flow is completed, right before                   // 138\n// the popup closes.                                                                    // 139\nOAuth._handleCredentialSecret = function (credentialToken, secret) {                    // 140\n  check(credentialToken, String);                                                       // 141\n  check(secret, String);                                                                // 142\n  if (! _.has(credentialSecrets,credentialToken)) {                                     // 143\n    credentialSecrets[credentialToken] = secret;                                        // 144\n  } else {                                                                              // 145\n    throw new Error(\"Duplicate credential token from OAuth login\");                     // 146\n  }                                                                                     // 147\n};                                                                                      // 148\n                                                                                        // 149\n// Used by accounts-oauth, which needs both a credentialToken and the                   // 150\n// corresponding to credential secret to call the `login` method over DDP.              // 151\nOAuth._retrieveCredentialSecret = function (credentialToken) {                          // 152\n  // First check the secrets collected by OAuth._handleCredentialSecret,                // 153\n  // then check localStorage. This matches what we do in                                // 154\n  // end_of_login_response.html.                                                        // 155\n  var secret = credentialSecrets[credentialToken];                                      // 156\n  if (! secret) {                                                                       // 157\n    var localStorageKey = OAuth._storageTokenPrefix + credentialToken;                  // 158\n    secret = Meteor._localStorage.getItem(localStorageKey);                             // 159\n    Meteor._localStorage.removeItem(localStorageKey);                                   // 160\n  } else {                                                                              // 161\n    delete credentialSecrets[credentialToken];                                          // 162\n  }                                                                                     // 163\n  return secret;                                                                        // 164\n};                                                                                      // 165\n                                                                                        // 166\n//////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                      //\n// packages/oauth/oauth_browser.js                                                      //\n//                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////\n                                                                                        //\n// Browser specific code for the OAuth package.                                         // 1\n                                                                                        // 2\n// Open a popup window, centered on the screen, and call a callback when it             // 3\n// closes.                                                                              // 4\n//                                                                                      // 5\n// @param url {String} url to show                                                      // 6\n// @param callback {Function} Callback function to call on completion. Takes no         // 7\n//   arguments.                                                                         // 8\n// @param dimensions {optional Object(width, height)} The dimensions of                 // 9\n//   the popup. If not passed defaults to something sane.                               // 10\nOAuth.showPopup = function (url, callback, dimensions) {                                // 11\n  // default dimensions that worked well for facebook and google                        // 12\n  var popup = openCenteredPopup(                                                        // 13\n    url,                                                                                // 14\n    (dimensions && dimensions.width) || 650,                                            // 15\n    (dimensions && dimensions.height) || 331                                            // 16\n  );                                                                                    // 17\n                                                                                        // 18\n  var checkPopupOpen = setInterval(function() {                                         // 19\n    try {                                                                               // 20\n      // Fix for #328 - added a second test criteria (popup.closed === undefined)       // 21\n      // to humour this Android quirk:                                                  // 22\n      // http://code.google.com/p/android/issues/detail?id=21061                        // 23\n      var popupClosed = popup.closed || popup.closed === undefined;                     // 24\n    } catch (e) {                                                                       // 25\n      // For some unknown reason, IE9 (and others?) sometimes (when                     // 26\n      // the popup closes too quickly?) throws \"SCRIPT16386: No such                    // 27\n      // interface supported\" when trying to read 'popup.closed'. Try                   // 28\n      // again in 100ms.                                                                // 29\n      return;                                                                           // 30\n    }                                                                                   // 31\n                                                                                        // 32\n    if (popupClosed) {                                                                  // 33\n      clearInterval(checkPopupOpen);                                                    // 34\n      callback();                                                                       // 35\n    }                                                                                   // 36\n  }, 100);                                                                              // 37\n};                                                                                      // 38\n                                                                                        // 39\nvar openCenteredPopup = function(url, width, height) {                                  // 40\n  var screenX = typeof window.screenX !== 'undefined'                                   // 41\n        ? window.screenX : window.screenLeft;                                           // 42\n  var screenY = typeof window.screenY !== 'undefined'                                   // 43\n        ? window.screenY : window.screenTop;                                            // 44\n  var outerWidth = typeof window.outerWidth !== 'undefined'                             // 45\n        ? window.outerWidth : document.body.clientWidth;                                // 46\n  var outerHeight = typeof window.outerHeight !== 'undefined'                           // 47\n        ? window.outerHeight : (document.body.clientHeight - 22);                       // 48\n  // XXX what is the 22?                                                                // 49\n                                                                                        // 50\n  // Use `outerWidth - width` and `outerHeight - height` for help in                    // 51\n  // positioning the popup centered relative to the current window                      // 52\n  var left = screenX + (outerWidth - width) / 2;                                        // 53\n  var top = screenY + (outerHeight - height) / 2;                                       // 54\n  var features = ('width=' + width + ',height=' + height +                              // 55\n                  ',left=' + left + ',top=' + top + ',scrollbars=yes');                 // 56\n                                                                                        // 57\n  var newwindow = window.open(url, 'Login', features);                                  // 58\n                                                                                        // 59\n  if (typeof newwindow === 'undefined') {                                               // 60\n    // blocked by a popup blocker maybe?                                                // 61\n    var err = new Error(\"The login popup was blocked by the browser\");                  // 62\n    err.attemptedUrl = url;                                                             // 63\n    throw err;                                                                          // 64\n  }                                                                                     // 65\n                                                                                        // 66\n  if (newwindow.focus)                                                                  // 67\n    newwindow.focus();                                                                  // 68\n                                                                                        // 69\n  return newwindow;                                                                     // 70\n};                                                                                      // 71\n//////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                      //\n// packages/oauth/oauth_common.js                                                       //\n//                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////\n                                                                                        //\nOAuth._storageTokenPrefix = \"Meteor.oauth.credentialSecret-\";                           // 1\n                                                                                        // 2\nOAuth._redirectUri = function (serviceName, config, params, absoluteUrlOptions) {       // 3\n  // XXX COMPAT WITH 0.9.0                                                              // 4\n  // The redirect URI used to have a \"?close\" query argument.  We                       // 5\n  // detect whether we need to be backwards compatible by checking for                  // 6\n  // the absence of the `loginStyle` field, which wasn't used in the                    // 7\n  // code which had the \"?close\" argument.                                              // 8\n  // This logic is duplicated in the tool so that the tool can do OAuth                 // 9\n  // flow with <= 0.9.0 servers (tools/auth.js).                                        // 10\n  var query = config.loginStyle ? null : \"close\";                                       // 11\n                                                                                        // 12\n  // Clone because we're going to mutate 'params'. The 'cordova' and                    // 13\n  // 'android' parameters are only used for picking the host of the                     // 14\n  // redirect URL, and not actually included in the redirect URL itself.                // 15\n  var isCordova = false;                                                                // 16\n  var isAndroid = false;                                                                // 17\n  if (params) {                                                                         // 18\n    params = _.clone(params);                                                           // 19\n    isCordova = params.cordova;                                                         // 20\n    isAndroid = params.android;                                                         // 21\n    delete params.cordova;                                                              // 22\n    delete params.android;                                                              // 23\n    if (_.isEmpty(params)) {                                                            // 24\n      params = undefined;                                                               // 25\n    }                                                                                   // 26\n  }                                                                                     // 27\n                                                                                        // 28\n  if (Meteor.isServer && isCordova) {                                                   // 29\n    var rootUrl = process.env.MOBILE_ROOT_URL ||                                        // 30\n          __meteor_runtime_config__.ROOT_URL;                                           // 31\n                                                                                        // 32\n    if (isAndroid) {                                                                    // 33\n      // Match the replace that we do in cordova boilerplate                            // 34\n      // (boilerplate-generator package).                                               // 35\n      // XXX Maybe we should put this in a separate package or something                // 36\n      // that is used here and by boilerplate-generator? Or maybe                       // 37\n      // `Meteor.absoluteUrl` should know how to do this?                               // 38\n      var url = Npm.require(\"url\");                                                     // 39\n      var parsedRootUrl = url.parse(rootUrl);                                           // 40\n      if (parsedRootUrl.hostname === \"localhost\") {                                     // 41\n        parsedRootUrl.hostname = \"10.0.2.2\";                                            // 42\n        delete parsedRootUrl.host;                                                      // 43\n      }                                                                                 // 44\n      rootUrl = url.format(parsedRootUrl);                                              // 45\n    }                                                                                   // 46\n                                                                                        // 47\n    absoluteUrlOptions = _.extend({}, absoluteUrlOptions, {                             // 48\n      // For Cordova clients, redirect to the special Cordova root url                  // 49\n      // (likely a local IP in development mode).                                       // 50\n      rootUrl: rootUrl                                                                  // 51\n    });                                                                                 // 52\n  }                                                                                     // 53\n                                                                                        // 54\n  return URL._constructUrl(                                                             // 55\n    Meteor.absoluteUrl('_oauth/' + serviceName, absoluteUrlOptions),                    // 56\n    query,                                                                              // 57\n    params);                                                                            // 58\n};                                                                                      // 59\n                                                                                        // 60\n//////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                      //\n// packages/oauth/deprecated.js                                                         //\n//                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////\n                                                                                        //\n// XXX COMPAT WITH 0.8.0                                                                // 1\n                                                                                        // 2\nOauth = OAuth;                                                                          // 3\n                                                                                        // 4\n//////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]