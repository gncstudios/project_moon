[{"type":"js","data":"(function () {\n\n/* Imports */\nvar _ = Package.underscore._;\nvar WebApp = Package.webapp.WebApp;\nvar main = Package.webapp.main;\nvar WebAppInternals = Package.webapp.WebAppInternals;\n\n/* Package-scope variables */\nvar exports, _s;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/mrt_underscore-string-latest/packages/mrt_underscore-string-latest.js                                    //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n(function () {                                                                                                       // 1\n                                                                                                                     // 2\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 3\n//                                                                                                            //     // 4\n// packages/mrt:underscore-string-latest/pre.js                                                               //     // 5\n//                                                                                                            //     // 6\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 7\n                                                                                                              //     // 8\n// Define an object named exports. This will cause underscore.js to put `_` as a                              // 1   // 9\n// field on it, instead of in the global namespace. See also post.js.                                         // 2   // 10\nexports = {};                                                                                                 // 3   // 11\n                                                                                                              // 4   // 12\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 13\n                                                                                                                     // 14\n}).call(this);                                                                                                       // 15\n                                                                                                                     // 16\n                                                                                                                     // 17\n                                                                                                                     // 18\n                                                                                                                     // 19\n                                                                                                                     // 20\n                                                                                                                     // 21\n(function () {                                                                                                       // 22\n                                                                                                                     // 23\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 24\n//                                                                                                            //     // 25\n// packages/mrt:underscore-string-latest/lib/underscore.string/lib/underscore.string.js                       //     // 26\n//                                                                                                            //     // 27\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 28\n                                                                                                              //     // 29\n//  Underscore.string                                                                                         // 1   // 30\n//  (c) 2010 Esa-Matti Suuronen <esa-matti aet suuronen dot org>                                              // 2   // 31\n//  Underscore.string is freely distributable under the terms of the MIT license.                             // 3   // 32\n//  Documentation: https://github.com/epeli/underscore.string                                                 // 4   // 33\n//  Some code is borrowed from MooTools and Alexandru Marasteanu.                                             // 5   // 34\n//  Version '2.3.2'                                                                                           // 6   // 35\n                                                                                                              // 7   // 36\n!function(root, String){                                                                                      // 8   // 37\n  'use strict';                                                                                               // 9   // 38\n                                                                                                              // 10  // 39\n  // Defining helper functions.                                                                               // 11  // 40\n                                                                                                              // 12  // 41\n  var nativeTrim = String.prototype.trim;                                                                     // 13  // 42\n  var nativeTrimRight = String.prototype.trimRight;                                                           // 14  // 43\n  var nativeTrimLeft = String.prototype.trimLeft;                                                             // 15  // 44\n                                                                                                              // 16  // 45\n  var parseNumber = function(source) { return source * 1 || 0; };                                             // 17  // 46\n                                                                                                              // 18  // 47\n  var strRepeat = function(str, qty){                                                                         // 19  // 48\n    if (qty < 1) return '';                                                                                   // 20  // 49\n    var result = '';                                                                                          // 21  // 50\n    while (qty > 0) {                                                                                         // 22  // 51\n      if (qty & 1) result += str;                                                                             // 23  // 52\n      qty >>= 1, str += str;                                                                                  // 24  // 53\n    }                                                                                                         // 25  // 54\n    return result;                                                                                            // 26  // 55\n  };                                                                                                          // 27  // 56\n                                                                                                              // 28  // 57\n  var slice = [].slice;                                                                                       // 29  // 58\n                                                                                                              // 30  // 59\n  var defaultToWhiteSpace = function(characters) {                                                            // 31  // 60\n    if (characters == null)                                                                                   // 32  // 61\n      return '\\\\s';                                                                                           // 33  // 62\n    else if (characters.source)                                                                               // 34  // 63\n      return characters.source;                                                                               // 35  // 64\n    else                                                                                                      // 36  // 65\n      return '[' + _s.escapeRegExp(characters) + ']';                                                         // 37  // 66\n  };                                                                                                          // 38  // 67\n                                                                                                              // 39  // 68\n  // Helper for toBoolean                                                                                     // 40  // 69\n  function boolMatch(s, matchers) {                                                                           // 41  // 70\n    var i, matcher, down = s.toLowerCase();                                                                   // 42  // 71\n    matchers = [].concat(matchers);                                                                           // 43  // 72\n    for (i = 0; i < matchers.length; i += 1) {                                                                // 44  // 73\n      matcher = matchers[i];                                                                                  // 45  // 74\n      if (!matcher) continue;                                                                                 // 46  // 75\n      if (matcher.test && matcher.test(s)) return true;                                                       // 47  // 76\n      if (matcher.toLowerCase() === down) return true;                                                        // 48  // 77\n    }                                                                                                         // 49  // 78\n  }                                                                                                           // 50  // 79\n                                                                                                              // 51  // 80\n  var escapeChars = {                                                                                         // 52  // 81\n    lt: '<',                                                                                                  // 53  // 82\n    gt: '>',                                                                                                  // 54  // 83\n    quot: '\"',                                                                                                // 55  // 84\n    amp: '&',                                                                                                 // 56  // 85\n    apos: \"'\"                                                                                                 // 57  // 86\n  };                                                                                                          // 58  // 87\n                                                                                                              // 59  // 88\n  var reversedEscapeChars = {};                                                                               // 60  // 89\n  for(var key in escapeChars) reversedEscapeChars[escapeChars[key]] = key;                                    // 61  // 90\n  reversedEscapeChars[\"'\"] = '#39';                                                                           // 62  // 91\n                                                                                                              // 63  // 92\n  // sprintf() for JavaScript 0.7-beta1                                                                       // 64  // 93\n  // http://www.diveintojavascript.com/projects/javascript-sprintf                                            // 65  // 94\n  //                                                                                                          // 66  // 95\n  // Copyright (c) Alexandru Marasteanu <alexaholic [at) gmail (dot] com>                                     // 67  // 96\n  // All rights reserved.                                                                                     // 68  // 97\n                                                                                                              // 69  // 98\n  var sprintf = (function() {                                                                                 // 70  // 99\n    function get_type(variable) {                                                                             // 71  // 100\n      return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase();                             // 72  // 101\n    }                                                                                                         // 73  // 102\n                                                                                                              // 74  // 103\n    var str_repeat = strRepeat;                                                                               // 75  // 104\n                                                                                                              // 76  // 105\n    var str_format = function() {                                                                             // 77  // 106\n      if (!str_format.cache.hasOwnProperty(arguments[0])) {                                                   // 78  // 107\n        str_format.cache[arguments[0]] = str_format.parse(arguments[0]);                                      // 79  // 108\n      }                                                                                                       // 80  // 109\n      return str_format.format.call(null, str_format.cache[arguments[0]], arguments);                         // 81  // 110\n    };                                                                                                        // 82  // 111\n                                                                                                              // 83  // 112\n    str_format.format = function(parse_tree, argv) {                                                          // 84  // 113\n      var cursor = 1, tree_length = parse_tree.length, node_type = '', arg, output = [], i, k, match, pad, pad_character, pad_length;\n      for (i = 0; i < tree_length; i++) {                                                                     // 86  // 115\n        node_type = get_type(parse_tree[i]);                                                                  // 87  // 116\n        if (node_type === 'string') {                                                                         // 88  // 117\n          output.push(parse_tree[i]);                                                                         // 89  // 118\n        }                                                                                                     // 90  // 119\n        else if (node_type === 'array') {                                                                     // 91  // 120\n          match = parse_tree[i]; // convenience purposes only                                                 // 92  // 121\n          if (match[2]) { // keyword argument                                                                 // 93  // 122\n            arg = argv[cursor];                                                                               // 94  // 123\n            for (k = 0; k < match[2].length; k++) {                                                           // 95  // 124\n              if (!arg.hasOwnProperty(match[2][k])) {                                                         // 96  // 125\n                throw new Error(sprintf('[_.sprintf] property \"%s\" does not exist', match[2][k]));            // 97  // 126\n              }                                                                                               // 98  // 127\n              arg = arg[match[2][k]];                                                                         // 99  // 128\n            }                                                                                                 // 100\n          } else if (match[1]) { // positional argument (explicit)                                            // 101\n            arg = argv[match[1]];                                                                             // 102\n          }                                                                                                   // 103\n          else { // positional argument (implicit)                                                            // 104\n            arg = argv[cursor++];                                                                             // 105\n          }                                                                                                   // 106\n                                                                                                              // 107\n          if (/[^s]/.test(match[8]) && (get_type(arg) != 'number')) {                                         // 108\n            throw new Error(sprintf('[_.sprintf] expecting number but found %s', get_type(arg)));             // 109\n          }                                                                                                   // 110\n          switch (match[8]) {                                                                                 // 111\n            case 'b': arg = arg.toString(2); break;                                                           // 112\n            case 'c': arg = String.fromCharCode(arg); break;                                                  // 113\n            case 'd': arg = parseInt(arg, 10); break;                                                         // 114\n            case 'e': arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential(); break;              // 115\n            case 'f': arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg); break;            // 116\n            case 'o': arg = arg.toString(8); break;                                                           // 117\n            case 's': arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg); break;      // 118\n            case 'u': arg = Math.abs(arg); break;                                                             // 119\n            case 'x': arg = arg.toString(16); break;                                                          // 120\n            case 'X': arg = arg.toString(16).toUpperCase(); break;                                            // 121\n          }                                                                                                   // 122\n          arg = (/[def]/.test(match[8]) && match[3] && arg >= 0 ? '+'+ arg : arg);                            // 123\n          pad_character = match[4] ? match[4] == '0' ? '0' : match[4].charAt(1) : ' ';                        // 124\n          pad_length = match[6] - String(arg).length;                                                         // 125\n          pad = match[6] ? str_repeat(pad_character, pad_length) : '';                                        // 126\n          output.push(match[5] ? arg + pad : pad + arg);                                                      // 127\n        }                                                                                                     // 128\n      }                                                                                                       // 129\n      return output.join('');                                                                                 // 130\n    };                                                                                                        // 131\n                                                                                                              // 132\n    str_format.cache = {};                                                                                    // 133\n                                                                                                              // 134\n    str_format.parse = function(fmt) {                                                                        // 135\n      var _fmt = fmt, match = [], parse_tree = [], arg_names = 0;                                             // 136\n      while (_fmt) {                                                                                          // 137\n        if ((match = /^[^\\x25]+/.exec(_fmt)) !== null) {                                                      // 138\n          parse_tree.push(match[0]);                                                                          // 139\n        }                                                                                                     // 140\n        else if ((match = /^\\x25{2}/.exec(_fmt)) !== null) {                                                  // 141\n          parse_tree.push('%');                                                                               // 142\n        }                                                                                                     // 143\n        else if ((match = /^\\x25(?:([1-9]\\d*)\\$|\\(([^\\)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-fosuxX])/.exec(_fmt)) !== null) {\n          if (match[2]) {                                                                                     // 145\n            arg_names |= 1;                                                                                   // 146\n            var field_list = [], replacement_field = match[2], field_match = [];                              // 147\n            if ((field_match = /^([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {                     // 148\n              field_list.push(field_match[1]);                                                                // 149\n              while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {       // 150\n                if ((field_match = /^\\.([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {               // 151\n                  field_list.push(field_match[1]);                                                            // 152\n                }                                                                                             // 153\n                else if ((field_match = /^\\[(\\d+)\\]/.exec(replacement_field)) !== null) {                     // 154\n                  field_list.push(field_match[1]);                                                            // 155\n                }                                                                                             // 156\n                else {                                                                                        // 157\n                  throw new Error('[_.sprintf] huh?');                                                        // 158\n                }                                                                                             // 159\n              }                                                                                               // 160\n            }                                                                                                 // 161\n            else {                                                                                            // 162\n              throw new Error('[_.sprintf] huh?');                                                            // 163\n            }                                                                                                 // 164\n            match[2] = field_list;                                                                            // 165\n          }                                                                                                   // 166\n          else {                                                                                              // 167\n            arg_names |= 2;                                                                                   // 168\n          }                                                                                                   // 169\n          if (arg_names === 3) {                                                                              // 170\n            throw new Error('[_.sprintf] mixing positional and named placeholders is not (yet) supported');   // 171\n          }                                                                                                   // 172\n          parse_tree.push(match);                                                                             // 173\n        }                                                                                                     // 174\n        else {                                                                                                // 175\n          throw new Error('[_.sprintf] huh?');                                                                // 176\n        }                                                                                                     // 177\n        _fmt = _fmt.substring(match[0].length);                                                               // 178\n      }                                                                                                       // 179\n      return parse_tree;                                                                                      // 180\n    };                                                                                                        // 181\n                                                                                                              // 182\n    return str_format;                                                                                        // 183\n  })();                                                                                                       // 184\n                                                                                                              // 185\n                                                                                                              // 186\n                                                                                                              // 187\n  // Defining underscore.string                                                                               // 188\n                                                                                                              // 189\n  var _s = {                                                                                                  // 190\n                                                                                                              // 191\n    VERSION: '2.3.0',                                                                                         // 192\n                                                                                                              // 193\n    isBlank: function(str){                                                                                   // 194\n      if (str == null) str = '';                                                                              // 195\n      return (/^\\s*$/).test(str);                                                                             // 196\n    },                                                                                                        // 197\n                                                                                                              // 198\n    stripTags: function(str){                                                                                 // 199\n      if (str == null) return '';                                                                             // 200\n      return String(str).replace(/<\\/?[^>]+>/g, '');                                                          // 201\n    },                                                                                                        // 202\n                                                                                                              // 203\n    capitalize : function(str){                                                                               // 204\n      str = str == null ? '' : String(str);                                                                   // 205\n      return str.charAt(0).toUpperCase() + str.slice(1);                                                      // 206\n    },                                                                                                        // 207\n                                                                                                              // 208\n    chop: function(str, step){                                                                                // 209\n      if (str == null) return [];                                                                             // 210\n      str = String(str);                                                                                      // 211\n      step = ~~step;                                                                                          // 212\n      return step > 0 ? str.match(new RegExp('.{1,' + step + '}', 'g')) : [str];                              // 213\n    },                                                                                                        // 214\n                                                                                                              // 215\n    clean: function(str){                                                                                     // 216\n      return _s.strip(str).replace(/\\s+/g, ' ');                                                              // 217\n    },                                                                                                        // 218\n                                                                                                              // 219\n    count: function(str, substr){                                                                             // 220\n      if (str == null || substr == null) return 0;                                                            // 221\n                                                                                                              // 222\n      str = String(str);                                                                                      // 223\n      substr = String(substr);                                                                                // 224\n                                                                                                              // 225\n      var count = 0,                                                                                          // 226\n        pos = 0,                                                                                              // 227\n        length = substr.length;                                                                               // 228\n                                                                                                              // 229\n      while (true) {                                                                                          // 230\n        pos = str.indexOf(substr, pos);                                                                       // 231\n        if (pos === -1) break;                                                                                // 232\n        count++;                                                                                              // 233\n        pos += length;                                                                                        // 234\n      }                                                                                                       // 235\n                                                                                                              // 236\n      return count;                                                                                           // 237\n    },                                                                                                        // 238\n                                                                                                              // 239\n    chars: function(str) {                                                                                    // 240\n      if (str == null) return [];                                                                             // 241\n      return String(str).split('');                                                                           // 242\n    },                                                                                                        // 243\n                                                                                                              // 244\n    swapCase: function(str) {                                                                                 // 245\n      if (str == null) return '';                                                                             // 246\n      return String(str).replace(/\\S/g, function(c){                                                          // 247\n        return c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase();                                     // 248\n      });                                                                                                     // 249\n    },                                                                                                        // 250\n                                                                                                              // 251\n    escapeHTML: function(str) {                                                                               // 252\n      if (str == null) return '';                                                                             // 253\n      return String(str).replace(/[&<>\"']/g, function(m){ return '&' + reversedEscapeChars[m] + ';'; });      // 254\n    },                                                                                                        // 255\n                                                                                                              // 256\n    unescapeHTML: function(str) {                                                                             // 257\n      if (str == null) return '';                                                                             // 258\n      return String(str).replace(/\\&([^;]+);/g, function(entity, entityCode){                                 // 259\n        var match;                                                                                            // 260\n                                                                                                              // 261\n        if (entityCode in escapeChars) {                                                                      // 262\n          return escapeChars[entityCode];                                                                     // 263\n        } else if (match = entityCode.match(/^#x([\\da-fA-F]+)$/)) {                                           // 264\n          return String.fromCharCode(parseInt(match[1], 16));                                                 // 265\n        } else if (match = entityCode.match(/^#(\\d+)$/)) {                                                    // 266\n          return String.fromCharCode(~~match[1]);                                                             // 267\n        } else {                                                                                              // 268\n          return entity;                                                                                      // 269\n        }                                                                                                     // 270\n      });                                                                                                     // 271\n    },                                                                                                        // 272\n                                                                                                              // 273\n    escapeRegExp: function(str){                                                                              // 274\n      if (str == null) return '';                                                                             // 275\n      return String(str).replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$1');                                       // 276\n    },                                                                                                        // 277\n                                                                                                              // 278\n    splice: function(str, i, howmany, substr){                                                                // 279\n      var arr = _s.chars(str);                                                                                // 280\n      arr.splice(~~i, ~~howmany, substr);                                                                     // 281\n      return arr.join('');                                                                                    // 282\n    },                                                                                                        // 283\n                                                                                                              // 284\n    insert: function(str, i, substr){                                                                         // 285\n      return _s.splice(str, i, 0, substr);                                                                    // 286\n    },                                                                                                        // 287\n                                                                                                              // 288\n    include: function(str, needle){                                                                           // 289\n      if (needle === '') return true;                                                                         // 290\n      if (str == null) return false;                                                                          // 291\n      return String(str).indexOf(needle) !== -1;                                                              // 292\n    },                                                                                                        // 293\n                                                                                                              // 294\n    join: function() {                                                                                        // 295\n      var args = slice.call(arguments),                                                                       // 296\n        separator = args.shift();                                                                             // 297\n                                                                                                              // 298\n      if (separator == null) separator = '';                                                                  // 299\n                                                                                                              // 300\n      return args.join(separator);                                                                            // 301\n    },                                                                                                        // 302\n                                                                                                              // 303\n    lines: function(str) {                                                                                    // 304\n      if (str == null) return [];                                                                             // 305\n      return String(str).split(\"\\n\");                                                                         // 306\n    },                                                                                                        // 307\n                                                                                                              // 308\n    reverse: function(str){                                                                                   // 309\n      return _s.chars(str).reverse().join('');                                                                // 310\n    },                                                                                                        // 311\n                                                                                                              // 312\n    startsWith: function(str, starts){                                                                        // 313\n      if (starts === '') return true;                                                                         // 314\n      if (str == null || starts == null) return false;                                                        // 315\n      str = String(str); starts = String(starts);                                                             // 316\n      return str.length >= starts.length && str.slice(0, starts.length) === starts;                           // 317\n    },                                                                                                        // 318\n                                                                                                              // 319\n    endsWith: function(str, ends){                                                                            // 320\n      if (ends === '') return true;                                                                           // 321\n      if (str == null || ends == null) return false;                                                          // 322\n      str = String(str); ends = String(ends);                                                                 // 323\n      return str.length >= ends.length && str.slice(str.length - ends.length) === ends;                       // 324\n    },                                                                                                        // 325\n                                                                                                              // 326\n    succ: function(str){                                                                                      // 327\n      if (str == null) return '';                                                                             // 328\n      str = String(str);                                                                                      // 329\n      return str.slice(0, -1) + String.fromCharCode(str.charCodeAt(str.length-1) + 1);                        // 330\n    },                                                                                                        // 331\n                                                                                                              // 332\n    titleize: function(str){                                                                                  // 333\n      if (str == null) return '';                                                                             // 334\n      str  = String(str).toLowerCase();                                                                       // 335\n      return str.replace(/(?:^|\\s|-)\\S/g, function(c){ return c.toUpperCase(); });                            // 336\n    },                                                                                                        // 337\n                                                                                                              // 338\n    camelize: function(str){                                                                                  // 339\n      return _s.trim(str).replace(/[-_\\s]+(.)?/g, function(match, c){ return c ? c.toUpperCase() : \"\"; });    // 340\n    },                                                                                                        // 341\n                                                                                                              // 342\n    underscored: function(str){                                                                               // 343\n      return _s.trim(str).replace(/([a-z\\d])([A-Z]+)/g, '$1_$2').replace(/[-\\s]+/g, '_').toLowerCase();       // 344\n    },                                                                                                        // 345\n                                                                                                              // 346\n    dasherize: function(str){                                                                                 // 347\n      return _s.trim(str).replace(/([A-Z])/g, '-$1').replace(/[-_\\s]+/g, '-').toLowerCase();                  // 348\n    },                                                                                                        // 349\n                                                                                                              // 350\n    classify: function(str){                                                                                  // 351\n      return _s.titleize(String(str).replace(/[\\W_]/g, ' ')).replace(/\\s/g, '');                              // 352\n    },                                                                                                        // 353\n                                                                                                              // 354\n    humanize: function(str){                                                                                  // 355\n      return _s.capitalize(_s.underscored(str).replace(/_id$/,'').replace(/_/g, ' '));                        // 356\n    },                                                                                                        // 357\n                                                                                                              // 358\n    trim: function(str, characters){                                                                          // 359\n      if (str == null) return '';                                                                             // 360\n      if (!characters && nativeTrim) return nativeTrim.call(str);                                             // 361\n      characters = defaultToWhiteSpace(characters);                                                           // 362\n      return String(str).replace(new RegExp('\\^' + characters + '+|' + characters + '+$', 'g'), '');          // 363\n    },                                                                                                        // 364\n                                                                                                              // 365\n    ltrim: function(str, characters){                                                                         // 366\n      if (str == null) return '';                                                                             // 367\n      if (!characters && nativeTrimLeft) return nativeTrimLeft.call(str);                                     // 368\n      characters = defaultToWhiteSpace(characters);                                                           // 369\n      return String(str).replace(new RegExp('^' + characters + '+'), '');                                     // 370\n    },                                                                                                        // 371\n                                                                                                              // 372\n    rtrim: function(str, characters){                                                                         // 373\n      if (str == null) return '';                                                                             // 374\n      if (!characters && nativeTrimRight) return nativeTrimRight.call(str);                                   // 375\n      characters = defaultToWhiteSpace(characters);                                                           // 376\n      return String(str).replace(new RegExp(characters + '+$'), '');                                          // 377\n    },                                                                                                        // 378\n                                                                                                              // 379\n    truncate: function(str, length, truncateStr){                                                             // 380\n      if (str == null) return '';                                                                             // 381\n      str = String(str); truncateStr = truncateStr || '...';                                                  // 382\n      length = ~~length;                                                                                      // 383\n      return str.length > length ? str.slice(0, length) + truncateStr : str;                                  // 384\n    },                                                                                                        // 385\n                                                                                                              // 386\n    /**                                                                                                       // 387\n     * _s.prune: a more elegant version of truncate                                                           // 388\n     * prune extra chars, never leaving a half-chopped word.                                                  // 389\n     * @author github.com/rwz                                                                                 // 390\n     */                                                                                                       // 391\n    prune: function(str, length, pruneStr){                                                                   // 392\n      if (str == null) return '';                                                                             // 393\n                                                                                                              // 394\n      str = String(str); length = ~~length;                                                                   // 395\n      pruneStr = pruneStr != null ? String(pruneStr) : '...';                                                 // 396\n                                                                                                              // 397\n      if (str.length <= length) return str;                                                                   // 398\n                                                                                                              // 399\n      var tmpl = function(c){ return c.toUpperCase() !== c.toLowerCase() ? 'A' : ' '; },                      // 400\n        template = str.slice(0, length+1).replace(/.(?=\\W*\\w*$)/g, tmpl); // 'Hello, world' -> 'HellAA AAAAA' // 401\n                                                                                                              // 402\n      if (template.slice(template.length-2).match(/\\w\\w/))                                                    // 403\n        template = template.replace(/\\s*\\S+$/, '');                                                           // 404\n      else                                                                                                    // 405\n        template = _s.rtrim(template.slice(0, template.length-1));                                            // 406\n                                                                                                              // 407\n      return (template+pruneStr).length > str.length ? str : str.slice(0, template.length)+pruneStr;          // 408\n    },                                                                                                        // 409\n                                                                                                              // 410\n    words: function(str, delimiter) {                                                                         // 411\n      if (_s.isBlank(str)) return [];                                                                         // 412\n      return _s.trim(str, delimiter).split(delimiter || /\\s+/);                                               // 413\n    },                                                                                                        // 414\n                                                                                                              // 415\n    pad: function(str, length, padStr, type) {                                                                // 416\n      str = str == null ? '' : String(str);                                                                   // 417\n      length = ~~length;                                                                                      // 418\n                                                                                                              // 419\n      var padlen  = 0;                                                                                        // 420\n                                                                                                              // 421\n      if (!padStr)                                                                                            // 422\n        padStr = ' ';                                                                                         // 423\n      else if (padStr.length > 1)                                                                             // 424\n        padStr = padStr.charAt(0);                                                                            // 425\n                                                                                                              // 426\n      switch(type) {                                                                                          // 427\n        case 'right':                                                                                         // 428\n          padlen = length - str.length;                                                                       // 429\n          return str + strRepeat(padStr, padlen);                                                             // 430\n        case 'both':                                                                                          // 431\n          padlen = length - str.length;                                                                       // 432\n          return strRepeat(padStr, Math.ceil(padlen/2)) + str                                                 // 433\n                  + strRepeat(padStr, Math.floor(padlen/2));                                                  // 434\n        default: // 'left'                                                                                    // 435\n          padlen = length - str.length;                                                                       // 436\n          return strRepeat(padStr, padlen) + str;                                                             // 437\n        }                                                                                                     // 438\n    },                                                                                                        // 439\n                                                                                                              // 440\n    lpad: function(str, length, padStr) {                                                                     // 441\n      return _s.pad(str, length, padStr);                                                                     // 442\n    },                                                                                                        // 443\n                                                                                                              // 444\n    rpad: function(str, length, padStr) {                                                                     // 445\n      return _s.pad(str, length, padStr, 'right');                                                            // 446\n    },                                                                                                        // 447\n                                                                                                              // 448\n    lrpad: function(str, length, padStr) {                                                                    // 449\n      return _s.pad(str, length, padStr, 'both');                                                             // 450\n    },                                                                                                        // 451\n                                                                                                              // 452\n    sprintf: sprintf,                                                                                         // 453\n                                                                                                              // 454\n    vsprintf: function(fmt, argv){                                                                            // 455\n      argv.unshift(fmt);                                                                                      // 456\n      return sprintf.apply(null, argv);                                                                       // 457\n    },                                                                                                        // 458\n                                                                                                              // 459\n    toNumber: function(str, decimals) {                                                                       // 460\n      if (!str) return 0;                                                                                     // 461\n      str = _s.trim(str);                                                                                     // 462\n      if (!str.match(/^-?\\d+(?:\\.\\d+)?$/)) return NaN;                                                        // 463\n      return parseNumber(parseNumber(str).toFixed(~~decimals));                                               // 464\n    },                                                                                                        // 465\n                                                                                                              // 466\n    numberFormat : function(number, dec, dsep, tsep) {                                                        // 467\n      if (isNaN(number) || number == null) return '';                                                         // 468\n                                                                                                              // 469\n      number = number.toFixed(~~dec);                                                                         // 470\n      tsep = typeof tsep == 'string' ? tsep : ',';                                                            // 471\n                                                                                                              // 472\n      var parts = number.split('.'), fnums = parts[0],                                                        // 473\n        decimals = parts[1] ? (dsep || '.') + parts[1] : '';                                                  // 474\n                                                                                                              // 475\n      return fnums.replace(/(\\d)(?=(?:\\d{3})+$)/g, '$1' + tsep) + decimals;                                   // 476\n    },                                                                                                        // 477\n                                                                                                              // 478\n    strRight: function(str, sep){                                                                             // 479\n      if (str == null) return '';                                                                             // 480\n      str = String(str); sep = sep != null ? String(sep) : sep;                                               // 481\n      var pos = !sep ? -1 : str.indexOf(sep);                                                                 // 482\n      return ~pos ? str.slice(pos+sep.length, str.length) : str;                                              // 483\n    },                                                                                                        // 484\n                                                                                                              // 485\n    strRightBack: function(str, sep){                                                                         // 486\n      if (str == null) return '';                                                                             // 487\n      str = String(str); sep = sep != null ? String(sep) : sep;                                               // 488\n      var pos = !sep ? -1 : str.lastIndexOf(sep);                                                             // 489\n      return ~pos ? str.slice(pos+sep.length, str.length) : str;                                              // 490\n    },                                                                                                        // 491\n                                                                                                              // 492\n    strLeft: function(str, sep){                                                                              // 493\n      if (str == null) return '';                                                                             // 494\n      str = String(str); sep = sep != null ? String(sep) : sep;                                               // 495\n      var pos = !sep ? -1 : str.indexOf(sep);                                                                 // 496\n      return ~pos ? str.slice(0, pos) : str;                                                                  // 497\n    },                                                                                                        // 498\n                                                                                                              // 499\n    strLeftBack: function(str, sep){                                                                          // 500\n      if (str == null) return '';                                                                             // 501\n      str += ''; sep = sep != null ? ''+sep : sep;                                                            // 502\n      var pos = str.lastIndexOf(sep);                                                                         // 503\n      return ~pos ? str.slice(0, pos) : str;                                                                  // 504\n    },                                                                                                        // 505\n                                                                                                              // 506\n    toSentence: function(array, separator, lastSeparator, serial) {                                           // 507\n      separator = separator || ', ';                                                                          // 508\n      lastSeparator = lastSeparator || ' and ';                                                               // 509\n      var a = array.slice(), lastMember = a.pop();                                                            // 510\n                                                                                                              // 511\n      if (array.length > 2 && serial) lastSeparator = _s.rtrim(separator) + lastSeparator;                    // 512\n                                                                                                              // 513\n      return a.length ? a.join(separator) + lastSeparator + lastMember : lastMember;                          // 514\n    },                                                                                                        // 515\n                                                                                                              // 516\n    toSentenceSerial: function() {                                                                            // 517\n      var args = slice.call(arguments);                                                                       // 518\n      args[3] = true;                                                                                         // 519\n      return _s.toSentence.apply(_s, args);                                                                   // 520\n    },                                                                                                        // 521\n                                                                                                              // 522\n    slugify: function(str) {                                                                                  // 523\n      if (str == null) return '';                                                                             // 524\n                                                                                                              // 525\n      var from  = \"ąàáäâãåæăćęèéëêìíïîłńòóöôõøśșțùúüûñçżź\",                                                   // 526\n          to    = \"aaaaaaaaaceeeeeiiiilnoooooosstuuuunczz\",                                                   // 527\n          regex = new RegExp(defaultToWhiteSpace(from), 'g');                                                 // 528\n                                                                                                              // 529\n      str = String(str).toLowerCase().replace(regex, function(c){                                             // 530\n        var index = from.indexOf(c);                                                                          // 531\n        return to.charAt(index) || '-';                                                                       // 532\n      });                                                                                                     // 533\n                                                                                                              // 534\n      return _s.dasherize(str.replace(/[^\\w\\s-]/g, ''));                                                      // 535\n    },                                                                                                        // 536\n                                                                                                              // 537\n    surround: function(str, wrapper) {                                                                        // 538\n      return [wrapper, str, wrapper].join('');                                                                // 539\n    },                                                                                                        // 540\n                                                                                                              // 541\n    quote: function(str, quoteChar) {                                                                         // 542\n      return _s.surround(str, quoteChar || '\"');                                                              // 543\n    },                                                                                                        // 544\n                                                                                                              // 545\n    unquote: function(str, quoteChar) {                                                                       // 546\n      quoteChar = quoteChar || '\"';                                                                           // 547\n      if (str[0] === quoteChar && str[str.length-1] === quoteChar)                                            // 548\n        return str.slice(1,str.length-1);                                                                     // 549\n      else return str;                                                                                        // 550\n    },                                                                                                        // 551\n                                                                                                              // 552\n    exports: function() {                                                                                     // 553\n      var result = {};                                                                                        // 554\n                                                                                                              // 555\n      for (var prop in this) {                                                                                // 556\n        if (!this.hasOwnProperty(prop) || prop.match(/^(?:include|contains|reverse)$/)) continue;             // 557\n        result[prop] = this[prop];                                                                            // 558\n      }                                                                                                       // 559\n                                                                                                              // 560\n      return result;                                                                                          // 561\n    },                                                                                                        // 562\n                                                                                                              // 563\n    repeat: function(str, qty, separator){                                                                    // 564\n      if (str == null) return '';                                                                             // 565\n                                                                                                              // 566\n      qty = ~~qty;                                                                                            // 567\n                                                                                                              // 568\n      // using faster implementation if separator is not needed;                                              // 569\n      if (separator == null) return strRepeat(String(str), qty);                                              // 570\n                                                                                                              // 571\n      // this one is about 300x slower in Google Chrome                                                       // 572\n      for (var repeat = []; qty > 0; repeat[--qty] = str) {}                                                  // 573\n      return repeat.join(separator);                                                                          // 574\n    },                                                                                                        // 575\n                                                                                                              // 576\n    naturalCmp: function(str1, str2){                                                                         // 577\n      if (str1 == str2) return 0;                                                                             // 578\n      if (!str1) return -1;                                                                                   // 579\n      if (!str2) return 1;                                                                                    // 580\n                                                                                                              // 581\n      var cmpRegex = /(\\.\\d+)|(\\d+)|(\\D+)/g,                                                                  // 582\n        tokens1 = String(str1).toLowerCase().match(cmpRegex),                                                 // 583\n        tokens2 = String(str2).toLowerCase().match(cmpRegex),                                                 // 584\n        count = Math.min(tokens1.length, tokens2.length);                                                     // 585\n                                                                                                              // 586\n      for(var i = 0; i < count; i++) {                                                                        // 587\n        var a = tokens1[i], b = tokens2[i];                                                                   // 588\n                                                                                                              // 589\n        if (a !== b){                                                                                         // 590\n          var num1 = parseInt(a, 10);                                                                         // 591\n          if (!isNaN(num1)){                                                                                  // 592\n            var num2 = parseInt(b, 10);                                                                       // 593\n            if (!isNaN(num2) && num1 - num2)                                                                  // 594\n              return num1 - num2;                                                                             // 595\n          }                                                                                                   // 596\n          return a < b ? -1 : 1;                                                                              // 597\n        }                                                                                                     // 598\n      }                                                                                                       // 599\n                                                                                                              // 600\n      if (tokens1.length === tokens2.length)                                                                  // 601\n        return tokens1.length - tokens2.length;                                                               // 602\n                                                                                                              // 603\n      return str1 < str2 ? -1 : 1;                                                                            // 604\n    },                                                                                                        // 605\n                                                                                                              // 606\n    levenshtein: function(str1, str2) {                                                                       // 607\n      if (str1 == null && str2 == null) return 0;                                                             // 608\n      if (str1 == null) return String(str2).length;                                                           // 609\n      if (str2 == null) return String(str1).length;                                                           // 610\n                                                                                                              // 611\n      str1 = String(str1); str2 = String(str2);                                                               // 612\n                                                                                                              // 613\n      var current = [], prev, value;                                                                          // 614\n                                                                                                              // 615\n      for (var i = 0; i <= str2.length; i++)                                                                  // 616\n        for (var j = 0; j <= str1.length; j++) {                                                              // 617\n          if (i && j)                                                                                         // 618\n            if (str1.charAt(j - 1) === str2.charAt(i - 1))                                                    // 619\n              value = prev;                                                                                   // 620\n            else                                                                                              // 621\n              value = Math.min(current[j], current[j - 1], prev) + 1;                                         // 622\n          else                                                                                                // 623\n            value = i + j;                                                                                    // 624\n                                                                                                              // 625\n          prev = current[j];                                                                                  // 626\n          current[j] = value;                                                                                 // 627\n        }                                                                                                     // 628\n                                                                                                              // 629\n      return current.pop();                                                                                   // 630\n    },                                                                                                        // 631\n                                                                                                              // 632\n    toBoolean: function(str, trueValues, falseValues) {                                                       // 633\n      if (typeof str === \"number\") str = \"\" + str;                                                            // 634\n      if (typeof str !== \"string\") return !!str;                                                              // 635\n      str = _s.trim(str);                                                                                     // 636\n      if (boolMatch(str, trueValues || [\"true\", \"1\"])) return true;                                           // 637\n      if (boolMatch(str, falseValues || [\"false\", \"0\"])) return false;                                        // 638\n    }                                                                                                         // 639\n  };                                                                                                          // 640\n                                                                                                              // 641\n  // Aliases                                                                                                  // 642\n                                                                                                              // 643\n  _s.strip    = _s.trim;                                                                                      // 644\n  _s.lstrip   = _s.ltrim;                                                                                     // 645\n  _s.rstrip   = _s.rtrim;                                                                                     // 646\n  _s.center   = _s.lrpad;                                                                                     // 647\n  _s.rjust    = _s.lpad;                                                                                      // 648\n  _s.ljust    = _s.rpad;                                                                                      // 649\n  _s.contains = _s.include;                                                                                   // 650\n  _s.q        = _s.quote;                                                                                     // 651\n  _s.toBool   = _s.toBoolean;                                                                                 // 652\n                                                                                                              // 653\n  // Exporting                                                                                                // 654\n                                                                                                              // 655\n  // CommonJS module is defined                                                                               // 656\n  if (typeof exports !== 'undefined') {                                                                       // 657\n    if (typeof module !== 'undefined' && module.exports)                                                      // 658\n      module.exports = _s;                                                                                    // 659\n                                                                                                              // 660\n    exports._s = _s;                                                                                          // 661\n  }                                                                                                           // 662\n                                                                                                              // 663\n  // Register as a named module with AMD.                                                                     // 664\n  if (typeof define === 'function' && define.amd)                                                             // 665\n    define('underscore.string', [], function(){ return _s; });                                                // 666\n                                                                                                              // 667\n                                                                                                              // 668\n  // Integrate with Underscore.js if defined                                                                  // 669\n  // or create our own underscore object.                                                                     // 670\n  root._ = root._ || {};                                                                                      // 671\n  root._.string = root._.str = _s;                                                                            // 672\n}(this, String);                                                                                              // 673\n                                                                                                              // 674\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 704\n                                                                                                                     // 705\n}).call(this);                                                                                                       // 706\n                                                                                                                     // 707\n                                                                                                                     // 708\n                                                                                                                     // 709\n                                                                                                                     // 710\n                                                                                                                     // 711\n                                                                                                                     // 712\n(function () {                                                                                                       // 713\n                                                                                                                     // 714\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 715\n//                                                                                                            //     // 716\n// packages/mrt:underscore-string-latest/post.js                                                              //     // 717\n//                                                                                                            //     // 718\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 719\n                                                                                                              //     // 720\n// This exports object was created in pre.js. Now copy the `_` object from it                                 // 1   // 721\n// into the package-scope variable `_`, which will get exported.                                              // 2   // 722\n_s = exports._s;                                                                                              // 3   // 723\n                                                                                                              // 4   // 724\n// Mix in non-conflict functions to Underscore namespace if you want                                          // 5   // 725\n_.str = _s;                                                                                                   // 6   // 726\n                                                                                                              // 7   // 727\n_.mixin(_.str.exports());                                                                                     // 8   // 728\n                                                                                                              // 9   // 729\n// All functions, include conflict, will be available through _.str object                                    // 10  // 730\n_.str.include('Underscore.string', 'string'); // => true                                                      // 11  // 731\n                                                                                                              // 12  // 732\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 733\n                                                                                                                     // 734\n}).call(this);                                                                                                       // 735\n                                                                                                                     // 736\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['mrt:underscore-string-latest'] = {\n  _s: _s\n};\n\n})();\n","servePath":"/packages/mrt_underscore-string-latest.js","sourceMap":{"version":3,"sources":["/packages/mrt_underscore-string-latest/packages/mrt_underscore-string-latest.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H","file":"/packages/mrt_underscore-string-latest.js","sourcesContent":["(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/mrt:underscore-string-latest/pre.js                                                               //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n// Define an object named exports. This will cause underscore.js to put `_` as a                              // 1\n// field on it, instead of in the global namespace. See also post.js.                                         // 2\nexports = {};                                                                                                 // 3\n                                                                                                              // 4\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/mrt:underscore-string-latest/lib/underscore.string/lib/underscore.string.js                       //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n//  Underscore.string                                                                                         // 1\n//  (c) 2010 Esa-Matti Suuronen <esa-matti aet suuronen dot org>                                              // 2\n//  Underscore.string is freely distributable under the terms of the MIT license.                             // 3\n//  Documentation: https://github.com/epeli/underscore.string                                                 // 4\n//  Some code is borrowed from MooTools and Alexandru Marasteanu.                                             // 5\n//  Version '2.3.2'                                                                                           // 6\n                                                                                                              // 7\n!function(root, String){                                                                                      // 8\n  'use strict';                                                                                               // 9\n                                                                                                              // 10\n  // Defining helper functions.                                                                               // 11\n                                                                                                              // 12\n  var nativeTrim = String.prototype.trim;                                                                     // 13\n  var nativeTrimRight = String.prototype.trimRight;                                                           // 14\n  var nativeTrimLeft = String.prototype.trimLeft;                                                             // 15\n                                                                                                              // 16\n  var parseNumber = function(source) { return source * 1 || 0; };                                             // 17\n                                                                                                              // 18\n  var strRepeat = function(str, qty){                                                                         // 19\n    if (qty < 1) return '';                                                                                   // 20\n    var result = '';                                                                                          // 21\n    while (qty > 0) {                                                                                         // 22\n      if (qty & 1) result += str;                                                                             // 23\n      qty >>= 1, str += str;                                                                                  // 24\n    }                                                                                                         // 25\n    return result;                                                                                            // 26\n  };                                                                                                          // 27\n                                                                                                              // 28\n  var slice = [].slice;                                                                                       // 29\n                                                                                                              // 30\n  var defaultToWhiteSpace = function(characters) {                                                            // 31\n    if (characters == null)                                                                                   // 32\n      return '\\\\s';                                                                                           // 33\n    else if (characters.source)                                                                               // 34\n      return characters.source;                                                                               // 35\n    else                                                                                                      // 36\n      return '[' + _s.escapeRegExp(characters) + ']';                                                         // 37\n  };                                                                                                          // 38\n                                                                                                              // 39\n  // Helper for toBoolean                                                                                     // 40\n  function boolMatch(s, matchers) {                                                                           // 41\n    var i, matcher, down = s.toLowerCase();                                                                   // 42\n    matchers = [].concat(matchers);                                                                           // 43\n    for (i = 0; i < matchers.length; i += 1) {                                                                // 44\n      matcher = matchers[i];                                                                                  // 45\n      if (!matcher) continue;                                                                                 // 46\n      if (matcher.test && matcher.test(s)) return true;                                                       // 47\n      if (matcher.toLowerCase() === down) return true;                                                        // 48\n    }                                                                                                         // 49\n  }                                                                                                           // 50\n                                                                                                              // 51\n  var escapeChars = {                                                                                         // 52\n    lt: '<',                                                                                                  // 53\n    gt: '>',                                                                                                  // 54\n    quot: '\"',                                                                                                // 55\n    amp: '&',                                                                                                 // 56\n    apos: \"'\"                                                                                                 // 57\n  };                                                                                                          // 58\n                                                                                                              // 59\n  var reversedEscapeChars = {};                                                                               // 60\n  for(var key in escapeChars) reversedEscapeChars[escapeChars[key]] = key;                                    // 61\n  reversedEscapeChars[\"'\"] = '#39';                                                                           // 62\n                                                                                                              // 63\n  // sprintf() for JavaScript 0.7-beta1                                                                       // 64\n  // http://www.diveintojavascript.com/projects/javascript-sprintf                                            // 65\n  //                                                                                                          // 66\n  // Copyright (c) Alexandru Marasteanu <alexaholic [at) gmail (dot] com>                                     // 67\n  // All rights reserved.                                                                                     // 68\n                                                                                                              // 69\n  var sprintf = (function() {                                                                                 // 70\n    function get_type(variable) {                                                                             // 71\n      return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase();                             // 72\n    }                                                                                                         // 73\n                                                                                                              // 74\n    var str_repeat = strRepeat;                                                                               // 75\n                                                                                                              // 76\n    var str_format = function() {                                                                             // 77\n      if (!str_format.cache.hasOwnProperty(arguments[0])) {                                                   // 78\n        str_format.cache[arguments[0]] = str_format.parse(arguments[0]);                                      // 79\n      }                                                                                                       // 80\n      return str_format.format.call(null, str_format.cache[arguments[0]], arguments);                         // 81\n    };                                                                                                        // 82\n                                                                                                              // 83\n    str_format.format = function(parse_tree, argv) {                                                          // 84\n      var cursor = 1, tree_length = parse_tree.length, node_type = '', arg, output = [], i, k, match, pad, pad_character, pad_length;\n      for (i = 0; i < tree_length; i++) {                                                                     // 86\n        node_type = get_type(parse_tree[i]);                                                                  // 87\n        if (node_type === 'string') {                                                                         // 88\n          output.push(parse_tree[i]);                                                                         // 89\n        }                                                                                                     // 90\n        else if (node_type === 'array') {                                                                     // 91\n          match = parse_tree[i]; // convenience purposes only                                                 // 92\n          if (match[2]) { // keyword argument                                                                 // 93\n            arg = argv[cursor];                                                                               // 94\n            for (k = 0; k < match[2].length; k++) {                                                           // 95\n              if (!arg.hasOwnProperty(match[2][k])) {                                                         // 96\n                throw new Error(sprintf('[_.sprintf] property \"%s\" does not exist', match[2][k]));            // 97\n              }                                                                                               // 98\n              arg = arg[match[2][k]];                                                                         // 99\n            }                                                                                                 // 100\n          } else if (match[1]) { // positional argument (explicit)                                            // 101\n            arg = argv[match[1]];                                                                             // 102\n          }                                                                                                   // 103\n          else { // positional argument (implicit)                                                            // 104\n            arg = argv[cursor++];                                                                             // 105\n          }                                                                                                   // 106\n                                                                                                              // 107\n          if (/[^s]/.test(match[8]) && (get_type(arg) != 'number')) {                                         // 108\n            throw new Error(sprintf('[_.sprintf] expecting number but found %s', get_type(arg)));             // 109\n          }                                                                                                   // 110\n          switch (match[8]) {                                                                                 // 111\n            case 'b': arg = arg.toString(2); break;                                                           // 112\n            case 'c': arg = String.fromCharCode(arg); break;                                                  // 113\n            case 'd': arg = parseInt(arg, 10); break;                                                         // 114\n            case 'e': arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential(); break;              // 115\n            case 'f': arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg); break;            // 116\n            case 'o': arg = arg.toString(8); break;                                                           // 117\n            case 's': arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg); break;      // 118\n            case 'u': arg = Math.abs(arg); break;                                                             // 119\n            case 'x': arg = arg.toString(16); break;                                                          // 120\n            case 'X': arg = arg.toString(16).toUpperCase(); break;                                            // 121\n          }                                                                                                   // 122\n          arg = (/[def]/.test(match[8]) && match[3] && arg >= 0 ? '+'+ arg : arg);                            // 123\n          pad_character = match[4] ? match[4] == '0' ? '0' : match[4].charAt(1) : ' ';                        // 124\n          pad_length = match[6] - String(arg).length;                                                         // 125\n          pad = match[6] ? str_repeat(pad_character, pad_length) : '';                                        // 126\n          output.push(match[5] ? arg + pad : pad + arg);                                                      // 127\n        }                                                                                                     // 128\n      }                                                                                                       // 129\n      return output.join('');                                                                                 // 130\n    };                                                                                                        // 131\n                                                                                                              // 132\n    str_format.cache = {};                                                                                    // 133\n                                                                                                              // 134\n    str_format.parse = function(fmt) {                                                                        // 135\n      var _fmt = fmt, match = [], parse_tree = [], arg_names = 0;                                             // 136\n      while (_fmt) {                                                                                          // 137\n        if ((match = /^[^\\x25]+/.exec(_fmt)) !== null) {                                                      // 138\n          parse_tree.push(match[0]);                                                                          // 139\n        }                                                                                                     // 140\n        else if ((match = /^\\x25{2}/.exec(_fmt)) !== null) {                                                  // 141\n          parse_tree.push('%');                                                                               // 142\n        }                                                                                                     // 143\n        else if ((match = /^\\x25(?:([1-9]\\d*)\\$|\\(([^\\)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-fosuxX])/.exec(_fmt)) !== null) {\n          if (match[2]) {                                                                                     // 145\n            arg_names |= 1;                                                                                   // 146\n            var field_list = [], replacement_field = match[2], field_match = [];                              // 147\n            if ((field_match = /^([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {                     // 148\n              field_list.push(field_match[1]);                                                                // 149\n              while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {       // 150\n                if ((field_match = /^\\.([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {               // 151\n                  field_list.push(field_match[1]);                                                            // 152\n                }                                                                                             // 153\n                else if ((field_match = /^\\[(\\d+)\\]/.exec(replacement_field)) !== null) {                     // 154\n                  field_list.push(field_match[1]);                                                            // 155\n                }                                                                                             // 156\n                else {                                                                                        // 157\n                  throw new Error('[_.sprintf] huh?');                                                        // 158\n                }                                                                                             // 159\n              }                                                                                               // 160\n            }                                                                                                 // 161\n            else {                                                                                            // 162\n              throw new Error('[_.sprintf] huh?');                                                            // 163\n            }                                                                                                 // 164\n            match[2] = field_list;                                                                            // 165\n          }                                                                                                   // 166\n          else {                                                                                              // 167\n            arg_names |= 2;                                                                                   // 168\n          }                                                                                                   // 169\n          if (arg_names === 3) {                                                                              // 170\n            throw new Error('[_.sprintf] mixing positional and named placeholders is not (yet) supported');   // 171\n          }                                                                                                   // 172\n          parse_tree.push(match);                                                                             // 173\n        }                                                                                                     // 174\n        else {                                                                                                // 175\n          throw new Error('[_.sprintf] huh?');                                                                // 176\n        }                                                                                                     // 177\n        _fmt = _fmt.substring(match[0].length);                                                               // 178\n      }                                                                                                       // 179\n      return parse_tree;                                                                                      // 180\n    };                                                                                                        // 181\n                                                                                                              // 182\n    return str_format;                                                                                        // 183\n  })();                                                                                                       // 184\n                                                                                                              // 185\n                                                                                                              // 186\n                                                                                                              // 187\n  // Defining underscore.string                                                                               // 188\n                                                                                                              // 189\n  var _s = {                                                                                                  // 190\n                                                                                                              // 191\n    VERSION: '2.3.0',                                                                                         // 192\n                                                                                                              // 193\n    isBlank: function(str){                                                                                   // 194\n      if (str == null) str = '';                                                                              // 195\n      return (/^\\s*$/).test(str);                                                                             // 196\n    },                                                                                                        // 197\n                                                                                                              // 198\n    stripTags: function(str){                                                                                 // 199\n      if (str == null) return '';                                                                             // 200\n      return String(str).replace(/<\\/?[^>]+>/g, '');                                                          // 201\n    },                                                                                                        // 202\n                                                                                                              // 203\n    capitalize : function(str){                                                                               // 204\n      str = str == null ? '' : String(str);                                                                   // 205\n      return str.charAt(0).toUpperCase() + str.slice(1);                                                      // 206\n    },                                                                                                        // 207\n                                                                                                              // 208\n    chop: function(str, step){                                                                                // 209\n      if (str == null) return [];                                                                             // 210\n      str = String(str);                                                                                      // 211\n      step = ~~step;                                                                                          // 212\n      return step > 0 ? str.match(new RegExp('.{1,' + step + '}', 'g')) : [str];                              // 213\n    },                                                                                                        // 214\n                                                                                                              // 215\n    clean: function(str){                                                                                     // 216\n      return _s.strip(str).replace(/\\s+/g, ' ');                                                              // 217\n    },                                                                                                        // 218\n                                                                                                              // 219\n    count: function(str, substr){                                                                             // 220\n      if (str == null || substr == null) return 0;                                                            // 221\n                                                                                                              // 222\n      str = String(str);                                                                                      // 223\n      substr = String(substr);                                                                                // 224\n                                                                                                              // 225\n      var count = 0,                                                                                          // 226\n        pos = 0,                                                                                              // 227\n        length = substr.length;                                                                               // 228\n                                                                                                              // 229\n      while (true) {                                                                                          // 230\n        pos = str.indexOf(substr, pos);                                                                       // 231\n        if (pos === -1) break;                                                                                // 232\n        count++;                                                                                              // 233\n        pos += length;                                                                                        // 234\n      }                                                                                                       // 235\n                                                                                                              // 236\n      return count;                                                                                           // 237\n    },                                                                                                        // 238\n                                                                                                              // 239\n    chars: function(str) {                                                                                    // 240\n      if (str == null) return [];                                                                             // 241\n      return String(str).split('');                                                                           // 242\n    },                                                                                                        // 243\n                                                                                                              // 244\n    swapCase: function(str) {                                                                                 // 245\n      if (str == null) return '';                                                                             // 246\n      return String(str).replace(/\\S/g, function(c){                                                          // 247\n        return c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase();                                     // 248\n      });                                                                                                     // 249\n    },                                                                                                        // 250\n                                                                                                              // 251\n    escapeHTML: function(str) {                                                                               // 252\n      if (str == null) return '';                                                                             // 253\n      return String(str).replace(/[&<>\"']/g, function(m){ return '&' + reversedEscapeChars[m] + ';'; });      // 254\n    },                                                                                                        // 255\n                                                                                                              // 256\n    unescapeHTML: function(str) {                                                                             // 257\n      if (str == null) return '';                                                                             // 258\n      return String(str).replace(/\\&([^;]+);/g, function(entity, entityCode){                                 // 259\n        var match;                                                                                            // 260\n                                                                                                              // 261\n        if (entityCode in escapeChars) {                                                                      // 262\n          return escapeChars[entityCode];                                                                     // 263\n        } else if (match = entityCode.match(/^#x([\\da-fA-F]+)$/)) {                                           // 264\n          return String.fromCharCode(parseInt(match[1], 16));                                                 // 265\n        } else if (match = entityCode.match(/^#(\\d+)$/)) {                                                    // 266\n          return String.fromCharCode(~~match[1]);                                                             // 267\n        } else {                                                                                              // 268\n          return entity;                                                                                      // 269\n        }                                                                                                     // 270\n      });                                                                                                     // 271\n    },                                                                                                        // 272\n                                                                                                              // 273\n    escapeRegExp: function(str){                                                                              // 274\n      if (str == null) return '';                                                                             // 275\n      return String(str).replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$1');                                       // 276\n    },                                                                                                        // 277\n                                                                                                              // 278\n    splice: function(str, i, howmany, substr){                                                                // 279\n      var arr = _s.chars(str);                                                                                // 280\n      arr.splice(~~i, ~~howmany, substr);                                                                     // 281\n      return arr.join('');                                                                                    // 282\n    },                                                                                                        // 283\n                                                                                                              // 284\n    insert: function(str, i, substr){                                                                         // 285\n      return _s.splice(str, i, 0, substr);                                                                    // 286\n    },                                                                                                        // 287\n                                                                                                              // 288\n    include: function(str, needle){                                                                           // 289\n      if (needle === '') return true;                                                                         // 290\n      if (str == null) return false;                                                                          // 291\n      return String(str).indexOf(needle) !== -1;                                                              // 292\n    },                                                                                                        // 293\n                                                                                                              // 294\n    join: function() {                                                                                        // 295\n      var args = slice.call(arguments),                                                                       // 296\n        separator = args.shift();                                                                             // 297\n                                                                                                              // 298\n      if (separator == null) separator = '';                                                                  // 299\n                                                                                                              // 300\n      return args.join(separator);                                                                            // 301\n    },                                                                                                        // 302\n                                                                                                              // 303\n    lines: function(str) {                                                                                    // 304\n      if (str == null) return [];                                                                             // 305\n      return String(str).split(\"\\n\");                                                                         // 306\n    },                                                                                                        // 307\n                                                                                                              // 308\n    reverse: function(str){                                                                                   // 309\n      return _s.chars(str).reverse().join('');                                                                // 310\n    },                                                                                                        // 311\n                                                                                                              // 312\n    startsWith: function(str, starts){                                                                        // 313\n      if (starts === '') return true;                                                                         // 314\n      if (str == null || starts == null) return false;                                                        // 315\n      str = String(str); starts = String(starts);                                                             // 316\n      return str.length >= starts.length && str.slice(0, starts.length) === starts;                           // 317\n    },                                                                                                        // 318\n                                                                                                              // 319\n    endsWith: function(str, ends){                                                                            // 320\n      if (ends === '') return true;                                                                           // 321\n      if (str == null || ends == null) return false;                                                          // 322\n      str = String(str); ends = String(ends);                                                                 // 323\n      return str.length >= ends.length && str.slice(str.length - ends.length) === ends;                       // 324\n    },                                                                                                        // 325\n                                                                                                              // 326\n    succ: function(str){                                                                                      // 327\n      if (str == null) return '';                                                                             // 328\n      str = String(str);                                                                                      // 329\n      return str.slice(0, -1) + String.fromCharCode(str.charCodeAt(str.length-1) + 1);                        // 330\n    },                                                                                                        // 331\n                                                                                                              // 332\n    titleize: function(str){                                                                                  // 333\n      if (str == null) return '';                                                                             // 334\n      str  = String(str).toLowerCase();                                                                       // 335\n      return str.replace(/(?:^|\\s|-)\\S/g, function(c){ return c.toUpperCase(); });                            // 336\n    },                                                                                                        // 337\n                                                                                                              // 338\n    camelize: function(str){                                                                                  // 339\n      return _s.trim(str).replace(/[-_\\s]+(.)?/g, function(match, c){ return c ? c.toUpperCase() : \"\"; });    // 340\n    },                                                                                                        // 341\n                                                                                                              // 342\n    underscored: function(str){                                                                               // 343\n      return _s.trim(str).replace(/([a-z\\d])([A-Z]+)/g, '$1_$2').replace(/[-\\s]+/g, '_').toLowerCase();       // 344\n    },                                                                                                        // 345\n                                                                                                              // 346\n    dasherize: function(str){                                                                                 // 347\n      return _s.trim(str).replace(/([A-Z])/g, '-$1').replace(/[-_\\s]+/g, '-').toLowerCase();                  // 348\n    },                                                                                                        // 349\n                                                                                                              // 350\n    classify: function(str){                                                                                  // 351\n      return _s.titleize(String(str).replace(/[\\W_]/g, ' ')).replace(/\\s/g, '');                              // 352\n    },                                                                                                        // 353\n                                                                                                              // 354\n    humanize: function(str){                                                                                  // 355\n      return _s.capitalize(_s.underscored(str).replace(/_id$/,'').replace(/_/g, ' '));                        // 356\n    },                                                                                                        // 357\n                                                                                                              // 358\n    trim: function(str, characters){                                                                          // 359\n      if (str == null) return '';                                                                             // 360\n      if (!characters && nativeTrim) return nativeTrim.call(str);                                             // 361\n      characters = defaultToWhiteSpace(characters);                                                           // 362\n      return String(str).replace(new RegExp('\\^' + characters + '+|' + characters + '+$', 'g'), '');          // 363\n    },                                                                                                        // 364\n                                                                                                              // 365\n    ltrim: function(str, characters){                                                                         // 366\n      if (str == null) return '';                                                                             // 367\n      if (!characters && nativeTrimLeft) return nativeTrimLeft.call(str);                                     // 368\n      characters = defaultToWhiteSpace(characters);                                                           // 369\n      return String(str).replace(new RegExp('^' + characters + '+'), '');                                     // 370\n    },                                                                                                        // 371\n                                                                                                              // 372\n    rtrim: function(str, characters){                                                                         // 373\n      if (str == null) return '';                                                                             // 374\n      if (!characters && nativeTrimRight) return nativeTrimRight.call(str);                                   // 375\n      characters = defaultToWhiteSpace(characters);                                                           // 376\n      return String(str).replace(new RegExp(characters + '+$'), '');                                          // 377\n    },                                                                                                        // 378\n                                                                                                              // 379\n    truncate: function(str, length, truncateStr){                                                             // 380\n      if (str == null) return '';                                                                             // 381\n      str = String(str); truncateStr = truncateStr || '...';                                                  // 382\n      length = ~~length;                                                                                      // 383\n      return str.length > length ? str.slice(0, length) + truncateStr : str;                                  // 384\n    },                                                                                                        // 385\n                                                                                                              // 386\n    /**                                                                                                       // 387\n     * _s.prune: a more elegant version of truncate                                                           // 388\n     * prune extra chars, never leaving a half-chopped word.                                                  // 389\n     * @author github.com/rwz                                                                                 // 390\n     */                                                                                                       // 391\n    prune: function(str, length, pruneStr){                                                                   // 392\n      if (str == null) return '';                                                                             // 393\n                                                                                                              // 394\n      str = String(str); length = ~~length;                                                                   // 395\n      pruneStr = pruneStr != null ? String(pruneStr) : '...';                                                 // 396\n                                                                                                              // 397\n      if (str.length <= length) return str;                                                                   // 398\n                                                                                                              // 399\n      var tmpl = function(c){ return c.toUpperCase() !== c.toLowerCase() ? 'A' : ' '; },                      // 400\n        template = str.slice(0, length+1).replace(/.(?=\\W*\\w*$)/g, tmpl); // 'Hello, world' -> 'HellAA AAAAA' // 401\n                                                                                                              // 402\n      if (template.slice(template.length-2).match(/\\w\\w/))                                                    // 403\n        template = template.replace(/\\s*\\S+$/, '');                                                           // 404\n      else                                                                                                    // 405\n        template = _s.rtrim(template.slice(0, template.length-1));                                            // 406\n                                                                                                              // 407\n      return (template+pruneStr).length > str.length ? str : str.slice(0, template.length)+pruneStr;          // 408\n    },                                                                                                        // 409\n                                                                                                              // 410\n    words: function(str, delimiter) {                                                                         // 411\n      if (_s.isBlank(str)) return [];                                                                         // 412\n      return _s.trim(str, delimiter).split(delimiter || /\\s+/);                                               // 413\n    },                                                                                                        // 414\n                                                                                                              // 415\n    pad: function(str, length, padStr, type) {                                                                // 416\n      str = str == null ? '' : String(str);                                                                   // 417\n      length = ~~length;                                                                                      // 418\n                                                                                                              // 419\n      var padlen  = 0;                                                                                        // 420\n                                                                                                              // 421\n      if (!padStr)                                                                                            // 422\n        padStr = ' ';                                                                                         // 423\n      else if (padStr.length > 1)                                                                             // 424\n        padStr = padStr.charAt(0);                                                                            // 425\n                                                                                                              // 426\n      switch(type) {                                                                                          // 427\n        case 'right':                                                                                         // 428\n          padlen = length - str.length;                                                                       // 429\n          return str + strRepeat(padStr, padlen);                                                             // 430\n        case 'both':                                                                                          // 431\n          padlen = length - str.length;                                                                       // 432\n          return strRepeat(padStr, Math.ceil(padlen/2)) + str                                                 // 433\n                  + strRepeat(padStr, Math.floor(padlen/2));                                                  // 434\n        default: // 'left'                                                                                    // 435\n          padlen = length - str.length;                                                                       // 436\n          return strRepeat(padStr, padlen) + str;                                                             // 437\n        }                                                                                                     // 438\n    },                                                                                                        // 439\n                                                                                                              // 440\n    lpad: function(str, length, padStr) {                                                                     // 441\n      return _s.pad(str, length, padStr);                                                                     // 442\n    },                                                                                                        // 443\n                                                                                                              // 444\n    rpad: function(str, length, padStr) {                                                                     // 445\n      return _s.pad(str, length, padStr, 'right');                                                            // 446\n    },                                                                                                        // 447\n                                                                                                              // 448\n    lrpad: function(str, length, padStr) {                                                                    // 449\n      return _s.pad(str, length, padStr, 'both');                                                             // 450\n    },                                                                                                        // 451\n                                                                                                              // 452\n    sprintf: sprintf,                                                                                         // 453\n                                                                                                              // 454\n    vsprintf: function(fmt, argv){                                                                            // 455\n      argv.unshift(fmt);                                                                                      // 456\n      return sprintf.apply(null, argv);                                                                       // 457\n    },                                                                                                        // 458\n                                                                                                              // 459\n    toNumber: function(str, decimals) {                                                                       // 460\n      if (!str) return 0;                                                                                     // 461\n      str = _s.trim(str);                                                                                     // 462\n      if (!str.match(/^-?\\d+(?:\\.\\d+)?$/)) return NaN;                                                        // 463\n      return parseNumber(parseNumber(str).toFixed(~~decimals));                                               // 464\n    },                                                                                                        // 465\n                                                                                                              // 466\n    numberFormat : function(number, dec, dsep, tsep) {                                                        // 467\n      if (isNaN(number) || number == null) return '';                                                         // 468\n                                                                                                              // 469\n      number = number.toFixed(~~dec);                                                                         // 470\n      tsep = typeof tsep == 'string' ? tsep : ',';                                                            // 471\n                                                                                                              // 472\n      var parts = number.split('.'), fnums = parts[0],                                                        // 473\n        decimals = parts[1] ? (dsep || '.') + parts[1] : '';                                                  // 474\n                                                                                                              // 475\n      return fnums.replace(/(\\d)(?=(?:\\d{3})+$)/g, '$1' + tsep) + decimals;                                   // 476\n    },                                                                                                        // 477\n                                                                                                              // 478\n    strRight: function(str, sep){                                                                             // 479\n      if (str == null) return '';                                                                             // 480\n      str = String(str); sep = sep != null ? String(sep) : sep;                                               // 481\n      var pos = !sep ? -1 : str.indexOf(sep);                                                                 // 482\n      return ~pos ? str.slice(pos+sep.length, str.length) : str;                                              // 483\n    },                                                                                                        // 484\n                                                                                                              // 485\n    strRightBack: function(str, sep){                                                                         // 486\n      if (str == null) return '';                                                                             // 487\n      str = String(str); sep = sep != null ? String(sep) : sep;                                               // 488\n      var pos = !sep ? -1 : str.lastIndexOf(sep);                                                             // 489\n      return ~pos ? str.slice(pos+sep.length, str.length) : str;                                              // 490\n    },                                                                                                        // 491\n                                                                                                              // 492\n    strLeft: function(str, sep){                                                                              // 493\n      if (str == null) return '';                                                                             // 494\n      str = String(str); sep = sep != null ? String(sep) : sep;                                               // 495\n      var pos = !sep ? -1 : str.indexOf(sep);                                                                 // 496\n      return ~pos ? str.slice(0, pos) : str;                                                                  // 497\n    },                                                                                                        // 498\n                                                                                                              // 499\n    strLeftBack: function(str, sep){                                                                          // 500\n      if (str == null) return '';                                                                             // 501\n      str += ''; sep = sep != null ? ''+sep : sep;                                                            // 502\n      var pos = str.lastIndexOf(sep);                                                                         // 503\n      return ~pos ? str.slice(0, pos) : str;                                                                  // 504\n    },                                                                                                        // 505\n                                                                                                              // 506\n    toSentence: function(array, separator, lastSeparator, serial) {                                           // 507\n      separator = separator || ', ';                                                                          // 508\n      lastSeparator = lastSeparator || ' and ';                                                               // 509\n      var a = array.slice(), lastMember = a.pop();                                                            // 510\n                                                                                                              // 511\n      if (array.length > 2 && serial) lastSeparator = _s.rtrim(separator) + lastSeparator;                    // 512\n                                                                                                              // 513\n      return a.length ? a.join(separator) + lastSeparator + lastMember : lastMember;                          // 514\n    },                                                                                                        // 515\n                                                                                                              // 516\n    toSentenceSerial: function() {                                                                            // 517\n      var args = slice.call(arguments);                                                                       // 518\n      args[3] = true;                                                                                         // 519\n      return _s.toSentence.apply(_s, args);                                                                   // 520\n    },                                                                                                        // 521\n                                                                                                              // 522\n    slugify: function(str) {                                                                                  // 523\n      if (str == null) return '';                                                                             // 524\n                                                                                                              // 525\n      var from  = \"ąàáäâãåæăćęèéëêìíïîłńòóöôõøśșțùúüûñçżź\",                                                   // 526\n          to    = \"aaaaaaaaaceeeeeiiiilnoooooosstuuuunczz\",                                                   // 527\n          regex = new RegExp(defaultToWhiteSpace(from), 'g');                                                 // 528\n                                                                                                              // 529\n      str = String(str).toLowerCase().replace(regex, function(c){                                             // 530\n        var index = from.indexOf(c);                                                                          // 531\n        return to.charAt(index) || '-';                                                                       // 532\n      });                                                                                                     // 533\n                                                                                                              // 534\n      return _s.dasherize(str.replace(/[^\\w\\s-]/g, ''));                                                      // 535\n    },                                                                                                        // 536\n                                                                                                              // 537\n    surround: function(str, wrapper) {                                                                        // 538\n      return [wrapper, str, wrapper].join('');                                                                // 539\n    },                                                                                                        // 540\n                                                                                                              // 541\n    quote: function(str, quoteChar) {                                                                         // 542\n      return _s.surround(str, quoteChar || '\"');                                                              // 543\n    },                                                                                                        // 544\n                                                                                                              // 545\n    unquote: function(str, quoteChar) {                                                                       // 546\n      quoteChar = quoteChar || '\"';                                                                           // 547\n      if (str[0] === quoteChar && str[str.length-1] === quoteChar)                                            // 548\n        return str.slice(1,str.length-1);                                                                     // 549\n      else return str;                                                                                        // 550\n    },                                                                                                        // 551\n                                                                                                              // 552\n    exports: function() {                                                                                     // 553\n      var result = {};                                                                                        // 554\n                                                                                                              // 555\n      for (var prop in this) {                                                                                // 556\n        if (!this.hasOwnProperty(prop) || prop.match(/^(?:include|contains|reverse)$/)) continue;             // 557\n        result[prop] = this[prop];                                                                            // 558\n      }                                                                                                       // 559\n                                                                                                              // 560\n      return result;                                                                                          // 561\n    },                                                                                                        // 562\n                                                                                                              // 563\n    repeat: function(str, qty, separator){                                                                    // 564\n      if (str == null) return '';                                                                             // 565\n                                                                                                              // 566\n      qty = ~~qty;                                                                                            // 567\n                                                                                                              // 568\n      // using faster implementation if separator is not needed;                                              // 569\n      if (separator == null) return strRepeat(String(str), qty);                                              // 570\n                                                                                                              // 571\n      // this one is about 300x slower in Google Chrome                                                       // 572\n      for (var repeat = []; qty > 0; repeat[--qty] = str) {}                                                  // 573\n      return repeat.join(separator);                                                                          // 574\n    },                                                                                                        // 575\n                                                                                                              // 576\n    naturalCmp: function(str1, str2){                                                                         // 577\n      if (str1 == str2) return 0;                                                                             // 578\n      if (!str1) return -1;                                                                                   // 579\n      if (!str2) return 1;                                                                                    // 580\n                                                                                                              // 581\n      var cmpRegex = /(\\.\\d+)|(\\d+)|(\\D+)/g,                                                                  // 582\n        tokens1 = String(str1).toLowerCase().match(cmpRegex),                                                 // 583\n        tokens2 = String(str2).toLowerCase().match(cmpRegex),                                                 // 584\n        count = Math.min(tokens1.length, tokens2.length);                                                     // 585\n                                                                                                              // 586\n      for(var i = 0; i < count; i++) {                                                                        // 587\n        var a = tokens1[i], b = tokens2[i];                                                                   // 588\n                                                                                                              // 589\n        if (a !== b){                                                                                         // 590\n          var num1 = parseInt(a, 10);                                                                         // 591\n          if (!isNaN(num1)){                                                                                  // 592\n            var num2 = parseInt(b, 10);                                                                       // 593\n            if (!isNaN(num2) && num1 - num2)                                                                  // 594\n              return num1 - num2;                                                                             // 595\n          }                                                                                                   // 596\n          return a < b ? -1 : 1;                                                                              // 597\n        }                                                                                                     // 598\n      }                                                                                                       // 599\n                                                                                                              // 600\n      if (tokens1.length === tokens2.length)                                                                  // 601\n        return tokens1.length - tokens2.length;                                                               // 602\n                                                                                                              // 603\n      return str1 < str2 ? -1 : 1;                                                                            // 604\n    },                                                                                                        // 605\n                                                                                                              // 606\n    levenshtein: function(str1, str2) {                                                                       // 607\n      if (str1 == null && str2 == null) return 0;                                                             // 608\n      if (str1 == null) return String(str2).length;                                                           // 609\n      if (str2 == null) return String(str1).length;                                                           // 610\n                                                                                                              // 611\n      str1 = String(str1); str2 = String(str2);                                                               // 612\n                                                                                                              // 613\n      var current = [], prev, value;                                                                          // 614\n                                                                                                              // 615\n      for (var i = 0; i <= str2.length; i++)                                                                  // 616\n        for (var j = 0; j <= str1.length; j++) {                                                              // 617\n          if (i && j)                                                                                         // 618\n            if (str1.charAt(j - 1) === str2.charAt(i - 1))                                                    // 619\n              value = prev;                                                                                   // 620\n            else                                                                                              // 621\n              value = Math.min(current[j], current[j - 1], prev) + 1;                                         // 622\n          else                                                                                                // 623\n            value = i + j;                                                                                    // 624\n                                                                                                              // 625\n          prev = current[j];                                                                                  // 626\n          current[j] = value;                                                                                 // 627\n        }                                                                                                     // 628\n                                                                                                              // 629\n      return current.pop();                                                                                   // 630\n    },                                                                                                        // 631\n                                                                                                              // 632\n    toBoolean: function(str, trueValues, falseValues) {                                                       // 633\n      if (typeof str === \"number\") str = \"\" + str;                                                            // 634\n      if (typeof str !== \"string\") return !!str;                                                              // 635\n      str = _s.trim(str);                                                                                     // 636\n      if (boolMatch(str, trueValues || [\"true\", \"1\"])) return true;                                           // 637\n      if (boolMatch(str, falseValues || [\"false\", \"0\"])) return false;                                        // 638\n    }                                                                                                         // 639\n  };                                                                                                          // 640\n                                                                                                              // 641\n  // Aliases                                                                                                  // 642\n                                                                                                              // 643\n  _s.strip    = _s.trim;                                                                                      // 644\n  _s.lstrip   = _s.ltrim;                                                                                     // 645\n  _s.rstrip   = _s.rtrim;                                                                                     // 646\n  _s.center   = _s.lrpad;                                                                                     // 647\n  _s.rjust    = _s.lpad;                                                                                      // 648\n  _s.ljust    = _s.rpad;                                                                                      // 649\n  _s.contains = _s.include;                                                                                   // 650\n  _s.q        = _s.quote;                                                                                     // 651\n  _s.toBool   = _s.toBoolean;                                                                                 // 652\n                                                                                                              // 653\n  // Exporting                                                                                                // 654\n                                                                                                              // 655\n  // CommonJS module is defined                                                                               // 656\n  if (typeof exports !== 'undefined') {                                                                       // 657\n    if (typeof module !== 'undefined' && module.exports)                                                      // 658\n      module.exports = _s;                                                                                    // 659\n                                                                                                              // 660\n    exports._s = _s;                                                                                          // 661\n  }                                                                                                           // 662\n                                                                                                              // 663\n  // Register as a named module with AMD.                                                                     // 664\n  if (typeof define === 'function' && define.amd)                                                             // 665\n    define('underscore.string', [], function(){ return _s; });                                                // 666\n                                                                                                              // 667\n                                                                                                              // 668\n  // Integrate with Underscore.js if defined                                                                  // 669\n  // or create our own underscore object.                                                                     // 670\n  root._ = root._ || {};                                                                                      // 671\n  root._.string = root._.str = _s;                                                                            // 672\n}(this, String);                                                                                              // 673\n                                                                                                              // 674\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/mrt:underscore-string-latest/post.js                                                              //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n// This exports object was created in pre.js. Now copy the `_` object from it                                 // 1\n// into the package-scope variable `_`, which will get exported.                                              // 2\n_s = exports._s;                                                                                              // 3\n                                                                                                              // 4\n// Mix in non-conflict functions to Underscore namespace if you want                                          // 5\n_.str = _s;                                                                                                   // 6\n                                                                                                              // 7\n_.mixin(_.str.exports());                                                                                     // 8\n                                                                                                              // 9\n// All functions, include conflict, will be available through _.str object                                    // 10\n_.str.include('Underscore.string', 'string'); // => true                                                      // 11\n                                                                                                              // 12\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]