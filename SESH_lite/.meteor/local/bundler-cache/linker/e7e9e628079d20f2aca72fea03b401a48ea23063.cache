[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar Template = Package.templating.Template;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\nvar _ = Package.underscore._;\nvar _s = Package['mrt:underscore-string-latest']._s;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar Spacebars = Package.spacebars.Spacebars;\nvar HTML = Package.htmljs.HTML;\n\n/* Package-scope variables */\nvar $, _, Aggregates, Formats, Rules, Transforms, Utils, Form, Shower;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/copleykj_shower/packages/copleykj_shower.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n(function () {                                                                                                         // 1\n                                                                                                                       // 2\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 3\n//                                                                                                               //    // 4\n// packages/copleykj:shower/js/pre.js                                                                            //    // 5\n//                                                                                                               //    // 6\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 7\n                                                                                                                 //    // 8\n$ = Package.jquery.$;                                                                                            // 1  // 9\n_ = Package.underscore._;                                                                                        // 2  // 10\n                                                                                                                 // 3  // 11\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 12\n                                                                                                                       // 13\n}).call(this);                                                                                                         // 14\n                                                                                                                       // 15\n                                                                                                                       // 16\n                                                                                                                       // 17\n                                                                                                                       // 18\n                                                                                                                       // 19\n                                                                                                                       // 20\n(function () {                                                                                                         // 21\n                                                                                                                       // 22\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 23\n//                                                                                                               //    // 24\n// packages/copleykj:shower/js/aggregates.js                                                                     //    // 25\n//                                                                                                               //    // 26\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 27\n                                                                                                                 //    // 28\nAggregates = {                                                                                                   // 1  // 29\n    sum: function(fields, formFieldsObject){                                                                     // 2  // 30\n        var sum = 0;                                                                                             // 3  // 31\n        _(fields).each( function(fieldName) {                                                                    // 4  // 32\n            var fieldValue = parseFloat(formFieldsObject[fieldName]);                                            // 5  // 33\n            if(_.isNumber(fieldValue)){                                                                          // 6  // 34\n                sum += fieldValue;                                                                               // 7  // 35\n            }                                                                                                    // 8  // 36\n        });                                                                                                      // 9  // 37\n        return sum.toString();                                                                                   // 10\n    },                                                                                                           // 11\n    avg: function(fields, formFieldsObject){                                                                     // 12\n        var sum = parseFloat(this.sum(fields, formFieldsObject));                                                // 13\n        sum = sum / fields.length;                                                                               // 14\n        return sum.toString();                                                                                   // 15\n    },                                                                                                           // 16\n    join: function(fields, formFieldsObject, argument){                                                          // 17\n        var fieldValues = [];                                                                                    // 18\n        _(fields).each( function(fieldName) {                                                                    // 19\n            fieldValues.push(formFieldsObject[fieldName]);                                                       // 20\n        });                                                                                                      // 21\n        return fieldValues.join(argument);                                                                       // 22\n    },                                                                                                           // 23\n    arraySet: function(fields, formFieldsObject){                                                                // 24\n        var newField = [];                                                                                       // 25\n        _(fields).each( function(fieldName) {                                                                    // 26\n            newField.push(formFieldsObject[fieldName]);                                                          // 27\n        });                                                                                                      // 28\n        return newField;                                                                                         // 29\n    },                                                                                                           // 30\n    objectSet: function(fields, formFieldsObject){                                                               // 31\n        var newField = {};                                                                                       // 32\n        _(fields).each( function(fieldName) {                                                                    // 33\n            newField[fieldName] = formFieldsObject[fieldName];                                                   // 34\n        });                                                                                                      // 35\n        return newField;                                                                                         // 36\n    }                                                                                                            // 37\n};                                                                                                               // 38\n                                                                                                                 // 39\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 68\n                                                                                                                       // 69\n}).call(this);                                                                                                         // 70\n                                                                                                                       // 71\n                                                                                                                       // 72\n                                                                                                                       // 73\n                                                                                                                       // 74\n                                                                                                                       // 75\n                                                                                                                       // 76\n(function () {                                                                                                         // 77\n                                                                                                                       // 78\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 79\n//                                                                                                               //    // 80\n// packages/copleykj:shower/js/formats.js                                                                        //    // 81\n//                                                                                                               //    // 82\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 83\n                                                                                                                 //    // 84\nFormats = {                                                                                                      // 1  // 85\n    email: /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n    money: /^[\\$\\€\\£\\¥]?[-]?[0-9]*[\\.]?[0-9]+$/,                                                                 // 3  // 87\n    integer: /^[-]?\\d+$/,                                                                                        // 4  // 88\n    boolean: /^(yes|no|true|false|0|1)$/i,                                                                       // 5  // 89\n    hex: /^[a-fA-F0-9]+$/,                                                                                       // 6  // 90\n    float: /^[-]?[0-9]*[\\.]?[0-9]+$/,                                                                            // 7  // 91\n    alphanumeric: /^[a-zA-Z0-9\\ \\']+$/,                                                                          // 8  // 92\n    ipv4: /^((([01]?[0-9]{1,2})|(2[0-4][0-9])|(25[0-5]))[.]){3}(([0-1]?[0-9]{1,2})|(2[0-4][0-9])|(25[0-5]))$/,   // 9  // 93\n    phone:  /^([\\+][0-9]{1,3}[\\ \\.\\-])?([\\(]{1}[0-9]{2,6}[\\)])?([0-9\\ \\.\\-\\/]{3,20})((x|ext|extension)[\\ ]?[0-9]{1,4})?$/,\n    url: /^(https?|ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/i,\n                                                                                                                 // 12\n    //TODO: Cleanup..                                                                                            // 13\n    //      Move var declarations to the top since they are hoisted anyway                                       // 14\n    //      Prefer while over do->while                                                                          // 15\n    creditcard: function (val) {                                                                                 // 16\n        //spaces and dashes may be valid characters, but must be stripped to calculate the checksum.             // 17\n        var valid = false, cardNumber = val.replace(/ +/g, '').replace(/-+/g, '');                               // 18\n                                                                                                                 // 19\n        var numDigits = cardNumber.length;                                                                       // 20\n                                                                                                                 // 21\n        if (numDigits >= 14 && numDigits <= 16 && parseInt(cardNumber, 10) > 0) {                                // 22\n                                                                                                                 // 23\n            var sum = 0, i = numDigits - 1, pos = 1, digit, luhn = \"\";                                           // 24\n            do {                                                                                                 // 25\n                digit = parseInt(cardNumber.charAt(i), 10);                                                      // 26\n                luhn += (pos++ % 2 === 0) ? digit * 2 : digit;                                                   // 27\n            } while (--i >= 0);                                                                                  // 28\n                                                                                                                 // 29\n            for (i = 0; i < luhn.length; i++) {                                                                  // 30\n                sum += parseInt(luhn.charAt(i), 10);                                                             // 31\n            }                                                                                                    // 32\n            valid = sum % 10 === 0;                                                                              // 33\n        }                                                                                                        // 34\n        return valid;                                                                                            // 35\n    }                                                                                                            // 36\n};                                                                                                               // 37\n                                                                                                                 // 38\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 123\n                                                                                                                       // 124\n}).call(this);                                                                                                         // 125\n                                                                                                                       // 126\n                                                                                                                       // 127\n                                                                                                                       // 128\n                                                                                                                       // 129\n                                                                                                                       // 130\n                                                                                                                       // 131\n(function () {                                                                                                         // 132\n                                                                                                                       // 133\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 134\n//                                                                                                               //    // 135\n// packages/copleykj:shower/js/rules.js                                                                          //    // 136\n//                                                                                                               //    // 137\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 138\n                                                                                                                 //    // 139\n//Rules are always passed 5 arguments, fieldValue, ruleValue, fieldName, formFieldsObject and fieldRequirements respectively.\nRules = {                                                                                                        // 2  // 141\n    maxLength: function(fieldValue, ruleValue) {                                                                 // 3  // 142\n        return fieldValue.length <= ruleValue;                                                                   // 4  // 143\n    },                                                                                                           // 5  // 144\n    minLength: function(fieldValue, ruleValue) {                                                                 // 6  // 145\n        return fieldValue.length >= ruleValue;                                                                   // 7  // 146\n    },                                                                                                           // 8  // 147\n    exactLength: function (fieldValue, ruleValue) {                                                              // 9  // 148\n        // keep comparator as ==                                                                                 // 10\n        return fieldValue.length == ruleValue;                                                                   // 11\n    },                                                                                                           // 12\n    failIfFound:function (fieldValue, ruleValue) {                                                               // 13\n        return fieldValue.indexOf(ruleValue) === -1;                                                             // 14\n    },                                                                                                           // 15\n    minValue: function(fieldValue, ruleValue) {                                                                  // 16\n        return fieldValue >= ruleValue;                                                                          // 17\n    },                                                                                                           // 18\n    maxValue: function(fieldValue, ruleValue) {                                                                  // 19\n        return fieldValue <= ruleValue;                                                                          // 20\n    },                                                                                                           // 21\n    equalsValue: function(fieldValue, ruleValue) {                                                               // 22\n        // keep comparator as ==                                                                                 // 23\n        return fieldValue == ruleValue;                                                                          // 24\n    },                                                                                                           // 25\n    equalsField: function(fieldValue, ruleValue, fieldName, formFieldsObject) {                                  // 26\n        return formFieldsObject[ruleValue] == fieldValue                                                         // 27\n    },                                                                                                           // 28\n    notEqualsField: function(fieldValue, ruleValue, fieldName, formFieldsObject) {                               // 29\n        return formFieldsObject[ruleValue] != fieldValue                                                         // 30\n    },                                                                                                           // 31\n    maxFileSize: function(fieldValue, ruleValue) {                                                               // 32\n        return this.maxValue(fieldValue.fileSize, ruleValue);                                                    // 33\n    },                                                                                                           // 34\n    acceptedFileTypes: function(fieldValue, ruleValue) {                                                         // 35\n        var fileType = fieldValue.FileType;                                                                      // 36\n        return ruleValue.indexOf(fileType) >= 0;                                                                 // 37\n    }                                                                                                            // 38\n                                                                                                                 // 39\n};                                                                                                               // 40\n                                                                                                                 // 41\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 181\n                                                                                                                       // 182\n}).call(this);                                                                                                         // 183\n                                                                                                                       // 184\n                                                                                                                       // 185\n                                                                                                                       // 186\n                                                                                                                       // 187\n                                                                                                                       // 188\n                                                                                                                       // 189\n(function () {                                                                                                         // 190\n                                                                                                                       // 191\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 192\n//                                                                                                               //    // 193\n// packages/copleykj:shower/js/transforms.js                                                                     //    // 194\n//                                                                                                               //    // 195\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 196\n                                                                                                                 //    // 197\n//Data transformation functions                                                                                  // 1  // 198\nTransforms = {                                                                                                   // 2  // 199\n    trim: function(string) {                                                                                     // 3  // 200\n        return _(string).trim();                                                                                 // 4  // 201\n    },                                                                                                           // 5  // 202\n    clean: function(string) {                                                                                    // 6  // 203\n        return _(string).clean();                                                                                // 7  // 204\n    },                                                                                                           // 8  // 205\n    capitalize: function(string) {                                                                               // 9  // 206\n        return _(string).capitalize();                                                                           // 10\n    },                                                                                                           // 11\n    slugify:function(string) {                                                                                   // 12\n        return _(string).slugify();                                                                              // 13\n    },                                                                                                           // 14\n    humanize:function(string) {                                                                                  // 15\n        return _(string).humanize();                                                                             // 16\n    },                                                                                                           // 17\n    stripTags: function(string) {                                                                                // 18\n        return _(string).stripTags();                                                                            // 19\n    },                                                                                                           // 20\n    escapeHTML: function(string) {                                                                               // 21\n        return _(string).escapeHTML();                                                                           // 22\n    },                                                                                                           // 23\n    toUpperCase: function(string) {                                                                              // 24\n        return string.toUpperCase();                                                                             // 25\n    },                                                                                                           // 26\n    toLowerCase: function(string) {                                                                              // 27\n        return string.toLowerCase();                                                                             // 28\n    }                                                                                                            // 29\n};                                                                                                               // 30\n                                                                                                                 // 31\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 229\n                                                                                                                       // 230\n}).call(this);                                                                                                         // 231\n                                                                                                                       // 232\n                                                                                                                       // 233\n                                                                                                                       // 234\n                                                                                                                       // 235\n                                                                                                                       // 236\n                                                                                                                       // 237\n(function () {                                                                                                         // 238\n                                                                                                                       // 239\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 240\n//                                                                                                               //    // 241\n// packages/copleykj:shower/js/utils.js                                                                          //    // 242\n//                                                                                                               //    // 243\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 244\n                                                                                                                 //    // 245\nUtils = {                                                                                                        // 1  // 246\n    getFormData: function(formElem){                                                                             // 2  // 247\n        var formData = $(formElem).serializeArray(), fileInputs = $(formElem).find(\"input[type=file]\");          // 3  // 248\n                                                                                                                 // 4  // 249\n        fileInputs.each(function () {                                                                            // 5  // 250\n          var fileSize = 0, fileType = '', fieldName = this.name;                                                // 6  // 251\n                                                                                                                 // 7  // 252\n          if (this.files.length > 0) {                                                                           // 8  // 253\n            fileSize = this.files[0].size;                                                                       // 9  // 254\n            fileType = this.files[0].type;                                                                       // 10\n          }                                                                                                      // 11\n          formData.push({name: fieldName, fileSize: fileSize, fileType: fileType, files: this.files});           // 12\n        });                                                                                                      // 13\n                                                                                                                 // 14\n        return formData;                                                                                         // 15\n    },                                                                                                           // 16\n    failureCallback: function(erroredFields, formHandle){                                                        // 17\n        $(\".meso-error\").text(\"\");                                                                               // 18\n        _(erroredFields).each(function(value, key) {                                                             // 19\n            formHandle.find(\"#\"+key+\"-error\").addClass(\"meso-error\").text(value.message);                        // 20\n        });                                                                                                      // 21\n    },                                                                                                           // 22\n    successCallback:function(formData, formHandle){                                                              // 23\n        if(formHandle[0] && formHandle[0].reset) {                                                               // 24\n            formHandle[0].reset();                                                                               // 25\n        }                                                                                                        // 26\n        $(\".meso-error\").text(\"\");                                                                               // 27\n        $(\".meso-error\").removeClass(\"meso-error\");                                                              // 28\n    }                                                                                                            // 29\n};                                                                                                               // 30\n                                                                                                                 // 31\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 277\n                                                                                                                       // 278\n}).call(this);                                                                                                         // 279\n                                                                                                                       // 280\n                                                                                                                       // 281\n                                                                                                                       // 282\n                                                                                                                       // 283\n                                                                                                                       // 284\n                                                                                                                       // 285\n(function () {                                                                                                         // 286\n                                                                                                                       // 287\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 288\n//                                                                                                               //    // 289\n// packages/copleykj:shower/js/form.js                                                                           //    // 290\n//                                                                                                               //    // 291\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 292\n                                                                                                                 //    // 293\nForm = function(fields, aggregates, removeFields, onSuccess, onFailure, onSubmit){                               // 1  // 294\n    this.fields = fields;                                                                                        // 2  // 295\n    this.onSuccess = onSuccess;                                                                                  // 3  // 296\n    this.onFailure = onFailure;                                                                                  // 4  // 297\n    this.aggregates = aggregates;                                                                                // 5  // 298\n    this.removeFields = removeFields;                                                                            // 6  // 299\n    this.onSubmit = onSubmit;                                                                                    // 7  // 300\n    this.erroredFields = {};                                                                                     // 8  // 301\n    this.selector = \"\";                                                                                          // 9  // 302\n};                                                                                                               // 10\n                                                                                                                 // 11\nForm.prototype.setSelector = function(selector){                                                                 // 12\n    this.selector = selector;                                                                                    // 13\n};                                                                                                               // 14\n                                                                                                                 // 15\nForm.prototype.validate = function (formFields, callback){                                                       // 16\n    var self = this, result;                                                                                     // 17\n    var formFieldsObject = _.isArray(formFields) ? this.formToObject(formFields) : formFields;                   // 18\n                                                                                                                 // 19\n    self.erroredFields = {};                                                                                     // 20\n                                                                                                                 // 21\n    _(self.fields).each( function(field, fieldName) {                                                            // 22\n                                                                                                                 // 23\n        // get the current value of the field that we are validating                                             // 24\n        var fieldValue = formFieldsObject[fieldName];                                                            // 25\n                                                                                                                 // 26\n        if(_.isEmpty(fieldValue) && field.defaultValue){                                                         // 27\n            if(_.isFunction(field.defaultValue)){                                                                // 28\n                formFieldsObject[fieldName] = field.defaultValue(formFieldsObject);                              // 29\n            }else{                                                                                               // 30\n                formFieldsObject[fieldName] = field.defaultValue;                                                // 31\n            }                                                                                                    // 32\n        }                                                                                                        // 33\n                                                                                                                 // 34\n        // check if field is required (or conditional required)                                                  // 35\n        if (field.required && !(fieldValue && _(fieldValue).trim().length > 0)) {                                // 36\n                                                                                                                 // 37\n            // simple case - required=true                                                                       // 38\n            if (field.required === true) {                                                                       // 39\n                self.addFieldError(fieldName, \"required\");                                                       // 40\n            } else {                                                                                             // 41\n                // more complex case - required:{dependsOn: \"otherfield\"}                                        // 42\n                if (field.required.dependsOn) {                                                                  // 43\n                    var dependsOnValue = formFieldsObject[field.required.dependsOn];                             // 44\n                    if (dependsOnValue && _(dependsOnValue).trim().length > 0) {                                 // 45\n                        if (field.required.value) {                                                              // 46\n                            // even more complex case - required:{dependsOn: \"otherfield\", value:\"USA\"}          // 47\n                            if (field.required.value === dependsOnValue) {                                       // 48\n                                self.addFieldError(fieldName, \"required\");                                       // 49\n                            }                                                                                    // 50\n                        } else {                                                                                 // 51\n                            self.addFieldError(fieldName, \"required\");                                           // 52\n                        }                                                                                        // 53\n                    }                                                                                            // 54\n                }                                                                                                // 55\n                                                                                                                 // 56\n                if(field.required.whenFieldAbsent && _(formFieldsObject[field.required.whenFieldAbsent]).isUndefined()){\n                    self.addFieldError(fieldName, \"required\");                                                   // 58\n                }                                                                                                // 59\n            }                                                                                                    // 60\n                                                                                                                 // 61\n        }                                                                                                        // 62\n                                                                                                                 // 63\n        // if there is a value we are going to validate it                                                       // 64\n        if(fieldValue){                                                                                          // 65\n                                                                                                                 // 66\n            // transform the data if need be.                                                                    // 67\n            if(field.transforms){                                                                                // 68\n                fieldValue=transform(fieldValue, field.transforms);                                              // 69\n                formFieldsObject[fieldName]=fieldValue;                                                          // 70\n            }                                                                                                    // 71\n                                                                                                                 // 72\n            // check the data format                                                                             // 73\n            if(field.format) {                                                                                   // 74\n                if(_.isArray(fieldValue)){                                                                       // 75\n                   _(fieldValue).each(function(subValue) {                                                       // 76\n                       self.checkFormat(subValue, fieldName, field.format);                                      // 77\n                   });                                                                                           // 78\n                }else{                                                                                           // 79\n                    self.checkFormat(fieldValue, fieldName, field.format);                                       // 80\n                }                                                                                                // 81\n            }                                                                                                    // 82\n                                                                                                                 // 83\n            // check rule sets                                                                                   // 84\n            _(field.rules).each( function( ruleValue, ruleName ) {                                               // 85\n                if(_.isArray(fieldValue)){                                                                       // 86\n                   _(fieldValue).each( function( subValue, key ) {                                               // 87\n                       result = Rules[ruleName](subValue, ruleValue, fieldName, formFieldsObject, self.fields);  // 88\n                       if(!result){                                                                              // 89\n                           self.addFieldError(fieldName, ruleName, key);                                         // 90\n                       }                                                                                         // 91\n                   });                                                                                           // 92\n                }else{                                                                                           // 93\n                    result = Rules[ruleName](fieldValue, ruleValue, fieldName, formFieldsObject, self.fields);   // 94\n                    if(!result){                                                                                 // 95\n                        self.addFieldError(fieldName, ruleName);                                                 // 96\n                    }                                                                                            // 97\n                }                                                                                                // 98\n            });                                                                                                  // 99\n        }                                                                                                        // 100\n                                                                                                                 // 101\n                                                                                                                 // 102\n    });                                                                                                          // 103\n                                                                                                                 // 104\n    //aggregate here before we remove fields that could be part of aggregation.. We shouldn't need to validate these fields\n    _(self.aggregates).each( function(aggregateInfo, newFieldName) {                                             // 106\n        var aggregateName = aggregateInfo[0];                                                                    // 107\n        var aggregateFields = aggregateInfo[1];                                                                  // 108\n        var aggregateArgs = aggregateInfo[2];                                                                    // 109\n        var newField = Aggregates[aggregateName](aggregateFields, formFieldsObject, aggregateArgs);              // 110\n                                                                                                                 // 111\n        formFieldsObject[newFieldName] = newField;                                                               // 112\n    });                                                                                                          // 113\n                                                                                                                 // 114\n    //remove any unwanted fields                                                                                 // 115\n    _(self.removeFields).each( function( value ) {                                                               // 116\n       delete formFieldsObject[value];                                                                           // 117\n    });                                                                                                          // 118\n                                                                                                                 // 119\n    if(_.isEmpty(self.erroredFields)){                                                                           // 120\n        self.erroredFields = false;                                                                              // 121\n        if(Meteor.isClient){                                                                                     // 122\n            self.onSuccess(formFieldsObject, $(self.selector));                                                  // 123\n        }                                                                                                        // 124\n    }else{                                                                                                       // 125\n        self.addMessages();                                                                                      // 126\n        if(Meteor.isClient){                                                                                     // 127\n            self.onFailure(self.erroredFields, $(self.selector));                                                // 128\n        }                                                                                                        // 129\n    }                                                                                                            // 130\n                                                                                                                 // 131\n    if(callback && _(callback).isFunction()){                                                                    // 132\n        callback(self.erroredFields, formFieldsObject);                                                          // 133\n    }else{                                                                                                       // 134\n        return {errors:self.erroredFields, formData:formFieldsObject};                                           // 135\n    }                                                                                                            // 136\n                                                                                                                 // 137\n};                                                                                                               // 138\n                                                                                                                 // 139\nForm.prototype.addMessages = function(){                                                                         // 140\n    var self = this;                                                                                             // 141\n    _(self.erroredFields).each( function( value, key ) {                                                         // 142\n        self.erroredFields[key].message = self.erroredFields[key].required ? self.fields[key].requiredMessage || \"*Required Field*\" : self.fields[key].message || \"*Invalid Input*\";\n    });                                                                                                          // 144\n};                                                                                                               // 145\n                                                                                                                 // 146\nForm.prototype.addFieldError = function(fieldName, ruleName, key){                                               // 147\n                                                                                                                 // 148\n    if(!this.erroredFields[fieldName]){                                                                          // 149\n        this.erroredFields[fieldName] = {};                                                                      // 150\n    }                                                                                                            // 151\n    if(key){                                                                                                     // 152\n        if(!this.erroredFields[fieldName][ruleName]){                                                            // 153\n            this.erroredFields[fieldName][ruleName] = [];                                                        // 154\n        }                                                                                                        // 155\n        this.erroredFields[fieldName][ruleName][key] = true;                                                     // 156\n    }else{                                                                                                       // 157\n       this.erroredFields[fieldName][ruleName] = true;                                                           // 158\n    }                                                                                                            // 159\n};                                                                                                               // 160\n                                                                                                                 // 161\nForm.prototype.checkFormat = function(fieldValue, fieldName, fieldFormat) {                                      // 162\n    var self = this;                                                                                             // 163\n    var format;                                                                                                  // 164\n                                                                                                                 // 165\n    if(_.isString(fieldFormat)){                                                                                 // 166\n        format=Formats[fieldFormat];                                                                             // 167\n    }else{                                                                                                       // 168\n        format = fieldFormat;                                                                                    // 169\n    }                                                                                                            // 170\n                                                                                                                 // 171\n    if(!format){                                                                                                 // 172\n        throw new Error(\"Unknown format:\"+fieldFormat);                                                          // 173\n    }                                                                                                            // 174\n    else {                                                                                                       // 175\n        if( _.isRegExp(format) ) {                                                                               // 176\n            // it's a regular expression                                                                         // 177\n            if(!format.test(fieldValue)){                                                                        // 178\n                self.addFieldError(fieldName, \"Invalid format\");                                                 // 179\n            }                                                                                                    // 180\n        } else {                                                                                                 // 181\n            // it's a function                                                                                   // 182\n            if(!format(fieldValue)){                                                                             // 183\n                self.addFieldError(fieldName, \"Invalid format\");                                                 // 184\n            }                                                                                                    // 185\n        }                                                                                                        // 186\n    }                                                                                                            // 187\n};                                                                                                               // 188\n                                                                                                                 // 189\nForm.prototype.formToObject = function(formFields){                                                              // 190\n    var formFieldsObject = {};                                                                                   // 191\n                                                                                                                 // 192\n    _(formFields).each( function( field ) {                                                                      // 193\n        var name = field.name;                                                                                   // 194\n        var value = field.fileSize ? _(field).pick(['fileType', 'fileSize', 'files']) : field.value;             // 195\n                                                                                                                 // 196\n        if(_.isUndefined(formFieldsObject[name])){                                                               // 197\n            formFieldsObject[name] = value;                                                                      // 198\n        }else if(_.isArray(formFieldsObject[name])){                                                             // 199\n            formFieldsObject[name].push(value);                                                                  // 200\n        }else{                                                                                                   // 201\n            formFieldsObject[name] = [formFieldsObject[name], value];                                            // 202\n        }                                                                                                        // 203\n    });                                                                                                          // 204\n                                                                                                                 // 205\n    return formFieldsObject;                                                                                     // 206\n};                                                                                                               // 207\n                                                                                                                 // 208\nvar transform = function (fieldValue, transformList) {                                                           // 209\n    _(transformList).each(function (transformName) {                                                             // 210\n        var transform=Transforms[transformName];                                                                 // 211\n        if (transform){                                                                                          // 212\n            fieldValue = transform(fieldValue);                                                                  // 213\n        }                                                                                                        // 214\n        else{                                                                                                    // 215\n            throw new Error(\"Invalid transform:\" + transformName);                                               // 216\n        }                                                                                                        // 217\n    });                                                                                                          // 218\n    return fieldValue;                                                                                           // 219\n};                                                                                                               // 220\n                                                                                                                 // 221\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 515\n                                                                                                                       // 516\n}).call(this);                                                                                                         // 517\n                                                                                                                       // 518\n                                                                                                                       // 519\n                                                                                                                       // 520\n                                                                                                                       // 521\n                                                                                                                       // 522\n                                                                                                                       // 523\n(function () {                                                                                                         // 524\n                                                                                                                       // 525\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 526\n//                                                                                                               //    // 527\n// packages/copleykj:shower/js/shower.js                                                                         //    // 528\n//                                                                                                               //    // 529\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 530\n                                                                                                                 //    // 531\nShower = function(optionsObject){                                                                                // 1  // 532\n    var selector = \"\";                                                                                           // 2  // 533\n    var formIdentifier = optionsObject.name || optionsObject.id;                                                 // 3  // 534\n                                                                                                                 // 4  // 535\n    optionsObject = _({onSuccess:Utils.successCallback, onFailure:Utils.failureCallback}).extend(optionsObject); // 5  // 536\n                                                                                                                 // 6  // 537\n    //Make sure they've got all the info we need and they haven't provided the same form information twice       // 7  // 538\n    if(!formIdentifier){                                                                                         // 8  // 539\n        throw new Error(\"Please specify the name of the form to validate.\");                                     // 9  // 540\n    }                                                                                                            // 10\n    if(!optionsObject.fields){                                                                                   // 11\n        throw new Error(\"Please specify which fields to validate.\");                                             // 12\n    }                                                                                                            // 13\n    if(Shower[formIdentifier]){                                                                                  // 14\n        throw new Error(\"Form is already being validated\");                                                      // 15\n    }                                                                                                            // 16\n                                                                                                                 // 17\n    //Create a new form object scoped to Shower.formName                                                         // 18\n    Shower[formIdentifier] = new Form(optionsObject.fields, optionsObject.aggregates, optionsObject.removeFields, optionsObject.onSuccess, optionsObject.onFailure);\n                                                                                                                 // 20\n    //if this is the browser, set up a submit event handler.                                                     // 21\n    if(Meteor.isClient){                                                                                         // 22\n        var events = {};                                                                                         // 23\n                                                                                                                 // 24\n        //decide which selector to use to grab the form handle                                                   // 25\n        if(optionsObject.name){                                                                                  // 26\n            selector = 'form[name='+formIdentifier+']';                                                          // 27\n        }else{                                                                                                   // 28\n            selector = '#'+formIdentifier;                                                                       // 29\n        }                                                                                                        // 30\n                                                                                                                 // 31\n                                                                                                                 // 32\n        if(!optionsObject.disableSubmit){                                                                        // 33\n                                                                                                                 // 34\n            if(optionsObject.template && _(optionsObject.template).isString()){                                  // 35\n                events['submit '+ selector] = function (event) {                                                 // 36\n                    var formFields = Shower.Utils.getFormData(event.target);                                     // 37\n                    Shower[formIdentifier].setSelector(event.target);                                            // 38\n                    event.preventDefault();                                                                      // 39\n                                                                                                                 // 40\n                    if(optionsObject.onSubmit){                                                                  // 41\n                        optionsObject.onSubmit(event);                                                           // 42\n                    }                                                                                            // 43\n                                                                                                                 // 44\n                    if(_(optionsObject.method).isFunction()){                                                    // 45\n                        optionsObject.method(formFields, this);                                                  // 46\n                    }else{                                                                                       // 47\n                        Meteor.call(optionsObject.method, formFields, this);                                     // 48\n                    }                                                                                            // 49\n                };                                                                                               // 50\n                Template[optionsObject.template].events(events);                                                 // 51\n            }else{                                                                                               // 52\n                $(function(){                                                                                    // 53\n                    //attach a submit event to the form                                                          // 54\n                    $(document.body).on('submit', selector, function (event) {                                   // 55\n                        event.preventDefault();                                                                  // 56\n                                                                                                                 // 57\n                        if(optionsObject.onSubmit){                                                              // 58\n                            optionsObject.onSubmit(event);                                                       // 59\n                        }                                                                                        // 60\n                                                                                                                 // 61\n                        var formFields = Utils.getFormData(this);                                                // 62\n                        Shower[formIdentifier].setSelector(event.target);                                        // 63\n                                                                                                                 // 64\n                        if(_(optionsObject.method).isFunction()){                                                // 65\n                            optionsObject.method(formFields);                                                    // 66\n                        }else{                                                                                   // 67\n                            Meteor.call(optionsObject.method, formFields);                                       // 68\n                        }                                                                                        // 69\n                    });                                                                                          // 70\n                });                                                                                              // 71\n            }                                                                                                    // 72\n                                                                                                                 // 73\n                                                                                                                 // 74\n        }                                                                                                        // 75\n                                                                                                                 // 76\n                                                                                                                 // 77\n    }                                                                                                            // 78\n};                                                                                                               // 79\n                                                                                                                 // 80\nShower.Rules = Rules;                                                                                            // 81\nShower.Transforms = Transforms;                                                                                  // 82\nShower.Formats = Formats;                                                                                        // 83\nShower.Aggregates = Aggregates;                                                                                  // 84\nShower.Utils = Utils;                                                                                            // 85\n                                                                                                                 // 86\nShower.registerAggregate = function (name, fn) {                                                                 // 87\n    if (Shower.Aggregates[name]) {                                                                               // 88\n        throw new Error(name + \" is already defined as a aggregate.\");                                           // 89\n    }                                                                                                            // 90\n    Shower.Aggregates[name] = fn;                                                                                // 91\n};                                                                                                               // 92\n                                                                                                                 // 93\nShower.registerFormat = function (name, fn) {                                                                    // 94\n    if (Shower.Formats[name]) {                                                                                  // 95\n        throw new Error(name + \" is already defined as a format.\");                                              // 96\n    }                                                                                                            // 97\n    Shower.Formats[name] = fn;                                                                                   // 98\n};                                                                                                               // 99\n                                                                                                                 // 100\nShower.registerRule = function (name, fn) {                                                                      // 101\n  if (Shower.Rules[name]) {                                                                                      // 102\n    throw new Error(name + \" is already defined as a rule.\");                                                    // 103\n  }                                                                                                              // 104\n  Shower.Rules[name] = fn;                                                                                       // 105\n};                                                                                                               // 106\n                                                                                                                 // 107\nShower.registerTransform = function (name, fn) {                                                                 // 108\n  if (Shower.Transforms[name]) {                                                                                 // 109\n    throw new Error(name + \" is already defined as a transform.\");                                               // 110\n  }                                                                                                              // 111\n  Shower.Transforms[name] = fn;                                                                                  // 112\n};                                                                                                               // 113\n                                                                                                                 // 114\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 646\n                                                                                                                       // 647\n}).call(this);                                                                                                         // 648\n                                                                                                                       // 649\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['copleykj:shower'] = {\n  Shower: Shower\n};\n\n})();\n","servePath":"/packages/copleykj_shower.js","sourceMap":{"version":3,"sources":["/packages/copleykj_shower/packages/copleykj_shower.js"],"names":[],"mappingsfile":"/packages/copleykj_shower.js","sourcesContent":["(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// packages/copleykj:shower/js/pre.js                                                                            //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\n$ = Package.jquery.$;                                                                                            // 1\n_ = Package.underscore._;                                                                                        // 2\n                                                                                                                 // 3\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// packages/copleykj:shower/js/aggregates.js                                                                     //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\nAggregates = {                                                                                                   // 1\n    sum: function(fields, formFieldsObject){                                                                     // 2\n        var sum = 0;                                                                                             // 3\n        _(fields).each( function(fieldName) {                                                                    // 4\n            var fieldValue = parseFloat(formFieldsObject[fieldName]);                                            // 5\n            if(_.isNumber(fieldValue)){                                                                          // 6\n                sum += fieldValue;                                                                               // 7\n            }                                                                                                    // 8\n        });                                                                                                      // 9\n        return sum.toString();                                                                                   // 10\n    },                                                                                                           // 11\n    avg: function(fields, formFieldsObject){                                                                     // 12\n        var sum = parseFloat(this.sum(fields, formFieldsObject));                                                // 13\n        sum = sum / fields.length;                                                                               // 14\n        return sum.toString();                                                                                   // 15\n    },                                                                                                           // 16\n    join: function(fields, formFieldsObject, argument){                                                          // 17\n        var fieldValues = [];                                                                                    // 18\n        _(fields).each( function(fieldName) {                                                                    // 19\n            fieldValues.push(formFieldsObject[fieldName]);                                                       // 20\n        });                                                                                                      // 21\n        return fieldValues.join(argument);                                                                       // 22\n    },                                                                                                           // 23\n    arraySet: function(fields, formFieldsObject){                                                                // 24\n        var newField = [];                                                                                       // 25\n        _(fields).each( function(fieldName) {                                                                    // 26\n            newField.push(formFieldsObject[fieldName]);                                                          // 27\n        });                                                                                                      // 28\n        return newField;                                                                                         // 29\n    },                                                                                                           // 30\n    objectSet: function(fields, formFieldsObject){                                                               // 31\n        var newField = {};                                                                                       // 32\n        _(fields).each( function(fieldName) {                                                                    // 33\n            newField[fieldName] = formFieldsObject[fieldName];                                                   // 34\n        });                                                                                                      // 35\n        return newField;                                                                                         // 36\n    }                                                                                                            // 37\n};                                                                                                               // 38\n                                                                                                                 // 39\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// packages/copleykj:shower/js/formats.js                                                                        //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\nFormats = {                                                                                                      // 1\n    email: /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n    money: /^[\\$\\€\\£\\¥]?[-]?[0-9]*[\\.]?[0-9]+$/,                                                                 // 3\n    integer: /^[-]?\\d+$/,                                                                                        // 4\n    boolean: /^(yes|no|true|false|0|1)$/i,                                                                       // 5\n    hex: /^[a-fA-F0-9]+$/,                                                                                       // 6\n    float: /^[-]?[0-9]*[\\.]?[0-9]+$/,                                                                            // 7\n    alphanumeric: /^[a-zA-Z0-9\\ \\']+$/,                                                                          // 8\n    ipv4: /^((([01]?[0-9]{1,2})|(2[0-4][0-9])|(25[0-5]))[.]){3}(([0-1]?[0-9]{1,2})|(2[0-4][0-9])|(25[0-5]))$/,   // 9\n    phone:  /^([\\+][0-9]{1,3}[\\ \\.\\-])?([\\(]{1}[0-9]{2,6}[\\)])?([0-9\\ \\.\\-\\/]{3,20})((x|ext|extension)[\\ ]?[0-9]{1,4})?$/,\n    url: /^(https?|ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/i,\n                                                                                                                 // 12\n    //TODO: Cleanup..                                                                                            // 13\n    //      Move var declarations to the top since they are hoisted anyway                                       // 14\n    //      Prefer while over do->while                                                                          // 15\n    creditcard: function (val) {                                                                                 // 16\n        //spaces and dashes may be valid characters, but must be stripped to calculate the checksum.             // 17\n        var valid = false, cardNumber = val.replace(/ +/g, '').replace(/-+/g, '');                               // 18\n                                                                                                                 // 19\n        var numDigits = cardNumber.length;                                                                       // 20\n                                                                                                                 // 21\n        if (numDigits >= 14 && numDigits <= 16 && parseInt(cardNumber, 10) > 0) {                                // 22\n                                                                                                                 // 23\n            var sum = 0, i = numDigits - 1, pos = 1, digit, luhn = \"\";                                           // 24\n            do {                                                                                                 // 25\n                digit = parseInt(cardNumber.charAt(i), 10);                                                      // 26\n                luhn += (pos++ % 2 === 0) ? digit * 2 : digit;                                                   // 27\n            } while (--i >= 0);                                                                                  // 28\n                                                                                                                 // 29\n            for (i = 0; i < luhn.length; i++) {                                                                  // 30\n                sum += parseInt(luhn.charAt(i), 10);                                                             // 31\n            }                                                                                                    // 32\n            valid = sum % 10 === 0;                                                                              // 33\n        }                                                                                                        // 34\n        return valid;                                                                                            // 35\n    }                                                                                                            // 36\n};                                                                                                               // 37\n                                                                                                                 // 38\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// packages/copleykj:shower/js/rules.js                                                                          //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\n//Rules are always passed 5 arguments, fieldValue, ruleValue, fieldName, formFieldsObject and fieldRequirements respectively.\nRules = {                                                                                                        // 2\n    maxLength: function(fieldValue, ruleValue) {                                                                 // 3\n        return fieldValue.length <= ruleValue;                                                                   // 4\n    },                                                                                                           // 5\n    minLength: function(fieldValue, ruleValue) {                                                                 // 6\n        return fieldValue.length >= ruleValue;                                                                   // 7\n    },                                                                                                           // 8\n    exactLength: function (fieldValue, ruleValue) {                                                              // 9\n        // keep comparator as ==                                                                                 // 10\n        return fieldValue.length == ruleValue;                                                                   // 11\n    },                                                                                                           // 12\n    failIfFound:function (fieldValue, ruleValue) {                                                               // 13\n        return fieldValue.indexOf(ruleValue) === -1;                                                             // 14\n    },                                                                                                           // 15\n    minValue: function(fieldValue, ruleValue) {                                                                  // 16\n        return fieldValue >= ruleValue;                                                                          // 17\n    },                                                                                                           // 18\n    maxValue: function(fieldValue, ruleValue) {                                                                  // 19\n        return fieldValue <= ruleValue;                                                                          // 20\n    },                                                                                                           // 21\n    equalsValue: function(fieldValue, ruleValue) {                                                               // 22\n        // keep comparator as ==                                                                                 // 23\n        return fieldValue == ruleValue;                                                                          // 24\n    },                                                                                                           // 25\n    equalsField: function(fieldValue, ruleValue, fieldName, formFieldsObject) {                                  // 26\n        return formFieldsObject[ruleValue] == fieldValue                                                         // 27\n    },                                                                                                           // 28\n    notEqualsField: function(fieldValue, ruleValue, fieldName, formFieldsObject) {                               // 29\n        return formFieldsObject[ruleValue] != fieldValue                                                         // 30\n    },                                                                                                           // 31\n    maxFileSize: function(fieldValue, ruleValue) {                                                               // 32\n        return this.maxValue(fieldValue.fileSize, ruleValue);                                                    // 33\n    },                                                                                                           // 34\n    acceptedFileTypes: function(fieldValue, ruleValue) {                                                         // 35\n        var fileType = fieldValue.FileType;                                                                      // 36\n        return ruleValue.indexOf(fileType) >= 0;                                                                 // 37\n    }                                                                                                            // 38\n                                                                                                                 // 39\n};                                                                                                               // 40\n                                                                                                                 // 41\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// packages/copleykj:shower/js/transforms.js                                                                     //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\n//Data transformation functions                                                                                  // 1\nTransforms = {                                                                                                   // 2\n    trim: function(string) {                                                                                     // 3\n        return _(string).trim();                                                                                 // 4\n    },                                                                                                           // 5\n    clean: function(string) {                                                                                    // 6\n        return _(string).clean();                                                                                // 7\n    },                                                                                                           // 8\n    capitalize: function(string) {                                                                               // 9\n        return _(string).capitalize();                                                                           // 10\n    },                                                                                                           // 11\n    slugify:function(string) {                                                                                   // 12\n        return _(string).slugify();                                                                              // 13\n    },                                                                                                           // 14\n    humanize:function(string) {                                                                                  // 15\n        return _(string).humanize();                                                                             // 16\n    },                                                                                                           // 17\n    stripTags: function(string) {                                                                                // 18\n        return _(string).stripTags();                                                                            // 19\n    },                                                                                                           // 20\n    escapeHTML: function(string) {                                                                               // 21\n        return _(string).escapeHTML();                                                                           // 22\n    },                                                                                                           // 23\n    toUpperCase: function(string) {                                                                              // 24\n        return string.toUpperCase();                                                                             // 25\n    },                                                                                                           // 26\n    toLowerCase: function(string) {                                                                              // 27\n        return string.toLowerCase();                                                                             // 28\n    }                                                                                                            // 29\n};                                                                                                               // 30\n                                                                                                                 // 31\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// packages/copleykj:shower/js/utils.js                                                                          //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\nUtils = {                                                                                                        // 1\n    getFormData: function(formElem){                                                                             // 2\n        var formData = $(formElem).serializeArray(), fileInputs = $(formElem).find(\"input[type=file]\");          // 3\n                                                                                                                 // 4\n        fileInputs.each(function () {                                                                            // 5\n          var fileSize = 0, fileType = '', fieldName = this.name;                                                // 6\n                                                                                                                 // 7\n          if (this.files.length > 0) {                                                                           // 8\n            fileSize = this.files[0].size;                                                                       // 9\n            fileType = this.files[0].type;                                                                       // 10\n          }                                                                                                      // 11\n          formData.push({name: fieldName, fileSize: fileSize, fileType: fileType, files: this.files});           // 12\n        });                                                                                                      // 13\n                                                                                                                 // 14\n        return formData;                                                                                         // 15\n    },                                                                                                           // 16\n    failureCallback: function(erroredFields, formHandle){                                                        // 17\n        $(\".meso-error\").text(\"\");                                                                               // 18\n        _(erroredFields).each(function(value, key) {                                                             // 19\n            formHandle.find(\"#\"+key+\"-error\").addClass(\"meso-error\").text(value.message);                        // 20\n        });                                                                                                      // 21\n    },                                                                                                           // 22\n    successCallback:function(formData, formHandle){                                                              // 23\n        if(formHandle[0] && formHandle[0].reset) {                                                               // 24\n            formHandle[0].reset();                                                                               // 25\n        }                                                                                                        // 26\n        $(\".meso-error\").text(\"\");                                                                               // 27\n        $(\".meso-error\").removeClass(\"meso-error\");                                                              // 28\n    }                                                                                                            // 29\n};                                                                                                               // 30\n                                                                                                                 // 31\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// packages/copleykj:shower/js/form.js                                                                           //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\nForm = function(fields, aggregates, removeFields, onSuccess, onFailure, onSubmit){                               // 1\n    this.fields = fields;                                                                                        // 2\n    this.onSuccess = onSuccess;                                                                                  // 3\n    this.onFailure = onFailure;                                                                                  // 4\n    this.aggregates = aggregates;                                                                                // 5\n    this.removeFields = removeFields;                                                                            // 6\n    this.onSubmit = onSubmit;                                                                                    // 7\n    this.erroredFields = {};                                                                                     // 8\n    this.selector = \"\";                                                                                          // 9\n};                                                                                                               // 10\n                                                                                                                 // 11\nForm.prototype.setSelector = function(selector){                                                                 // 12\n    this.selector = selector;                                                                                    // 13\n};                                                                                                               // 14\n                                                                                                                 // 15\nForm.prototype.validate = function (formFields, callback){                                                       // 16\n    var self = this, result;                                                                                     // 17\n    var formFieldsObject = _.isArray(formFields) ? this.formToObject(formFields) : formFields;                   // 18\n                                                                                                                 // 19\n    self.erroredFields = {};                                                                                     // 20\n                                                                                                                 // 21\n    _(self.fields).each( function(field, fieldName) {                                                            // 22\n                                                                                                                 // 23\n        // get the current value of the field that we are validating                                             // 24\n        var fieldValue = formFieldsObject[fieldName];                                                            // 25\n                                                                                                                 // 26\n        if(_.isEmpty(fieldValue) && field.defaultValue){                                                         // 27\n            if(_.isFunction(field.defaultValue)){                                                                // 28\n                formFieldsObject[fieldName] = field.defaultValue(formFieldsObject);                              // 29\n            }else{                                                                                               // 30\n                formFieldsObject[fieldName] = field.defaultValue;                                                // 31\n            }                                                                                                    // 32\n        }                                                                                                        // 33\n                                                                                                                 // 34\n        // check if field is required (or conditional required)                                                  // 35\n        if (field.required && !(fieldValue && _(fieldValue).trim().length > 0)) {                                // 36\n                                                                                                                 // 37\n            // simple case - required=true                                                                       // 38\n            if (field.required === true) {                                                                       // 39\n                self.addFieldError(fieldName, \"required\");                                                       // 40\n            } else {                                                                                             // 41\n                // more complex case - required:{dependsOn: \"otherfield\"}                                        // 42\n                if (field.required.dependsOn) {                                                                  // 43\n                    var dependsOnValue = formFieldsObject[field.required.dependsOn];                             // 44\n                    if (dependsOnValue && _(dependsOnValue).trim().length > 0) {                                 // 45\n                        if (field.required.value) {                                                              // 46\n                            // even more complex case - required:{dependsOn: \"otherfield\", value:\"USA\"}          // 47\n                            if (field.required.value === dependsOnValue) {                                       // 48\n                                self.addFieldError(fieldName, \"required\");                                       // 49\n                            }                                                                                    // 50\n                        } else {                                                                                 // 51\n                            self.addFieldError(fieldName, \"required\");                                           // 52\n                        }                                                                                        // 53\n                    }                                                                                            // 54\n                }                                                                                                // 55\n                                                                                                                 // 56\n                if(field.required.whenFieldAbsent && _(formFieldsObject[field.required.whenFieldAbsent]).isUndefined()){\n                    self.addFieldError(fieldName, \"required\");                                                   // 58\n                }                                                                                                // 59\n            }                                                                                                    // 60\n                                                                                                                 // 61\n        }                                                                                                        // 62\n                                                                                                                 // 63\n        // if there is a value we are going to validate it                                                       // 64\n        if(fieldValue){                                                                                          // 65\n                                                                                                                 // 66\n            // transform the data if need be.                                                                    // 67\n            if(field.transforms){                                                                                // 68\n                fieldValue=transform(fieldValue, field.transforms);                                              // 69\n                formFieldsObject[fieldName]=fieldValue;                                                          // 70\n            }                                                                                                    // 71\n                                                                                                                 // 72\n            // check the data format                                                                             // 73\n            if(field.format) {                                                                                   // 74\n                if(_.isArray(fieldValue)){                                                                       // 75\n                   _(fieldValue).each(function(subValue) {                                                       // 76\n                       self.checkFormat(subValue, fieldName, field.format);                                      // 77\n                   });                                                                                           // 78\n                }else{                                                                                           // 79\n                    self.checkFormat(fieldValue, fieldName, field.format);                                       // 80\n                }                                                                                                // 81\n            }                                                                                                    // 82\n                                                                                                                 // 83\n            // check rule sets                                                                                   // 84\n            _(field.rules).each( function( ruleValue, ruleName ) {                                               // 85\n                if(_.isArray(fieldValue)){                                                                       // 86\n                   _(fieldValue).each( function( subValue, key ) {                                               // 87\n                       result = Rules[ruleName](subValue, ruleValue, fieldName, formFieldsObject, self.fields);  // 88\n                       if(!result){                                                                              // 89\n                           self.addFieldError(fieldName, ruleName, key);                                         // 90\n                       }                                                                                         // 91\n                   });                                                                                           // 92\n                }else{                                                                                           // 93\n                    result = Rules[ruleName](fieldValue, ruleValue, fieldName, formFieldsObject, self.fields);   // 94\n                    if(!result){                                                                                 // 95\n                        self.addFieldError(fieldName, ruleName);                                                 // 96\n                    }                                                                                            // 97\n                }                                                                                                // 98\n            });                                                                                                  // 99\n        }                                                                                                        // 100\n                                                                                                                 // 101\n                                                                                                                 // 102\n    });                                                                                                          // 103\n                                                                                                                 // 104\n    //aggregate here before we remove fields that could be part of aggregation.. We shouldn't need to validate these fields\n    _(self.aggregates).each( function(aggregateInfo, newFieldName) {                                             // 106\n        var aggregateName = aggregateInfo[0];                                                                    // 107\n        var aggregateFields = aggregateInfo[1];                                                                  // 108\n        var aggregateArgs = aggregateInfo[2];                                                                    // 109\n        var newField = Aggregates[aggregateName](aggregateFields, formFieldsObject, aggregateArgs);              // 110\n                                                                                                                 // 111\n        formFieldsObject[newFieldName] = newField;                                                               // 112\n    });                                                                                                          // 113\n                                                                                                                 // 114\n    //remove any unwanted fields                                                                                 // 115\n    _(self.removeFields).each( function( value ) {                                                               // 116\n       delete formFieldsObject[value];                                                                           // 117\n    });                                                                                                          // 118\n                                                                                                                 // 119\n    if(_.isEmpty(self.erroredFields)){                                                                           // 120\n        self.erroredFields = false;                                                                              // 121\n        if(Meteor.isClient){                                                                                     // 122\n            self.onSuccess(formFieldsObject, $(self.selector));                                                  // 123\n        }                                                                                                        // 124\n    }else{                                                                                                       // 125\n        self.addMessages();                                                                                      // 126\n        if(Meteor.isClient){                                                                                     // 127\n            self.onFailure(self.erroredFields, $(self.selector));                                                // 128\n        }                                                                                                        // 129\n    }                                                                                                            // 130\n                                                                                                                 // 131\n    if(callback && _(callback).isFunction()){                                                                    // 132\n        callback(self.erroredFields, formFieldsObject);                                                          // 133\n    }else{                                                                                                       // 134\n        return {errors:self.erroredFields, formData:formFieldsObject};                                           // 135\n    }                                                                                                            // 136\n                                                                                                                 // 137\n};                                                                                                               // 138\n                                                                                                                 // 139\nForm.prototype.addMessages = function(){                                                                         // 140\n    var self = this;                                                                                             // 141\n    _(self.erroredFields).each( function( value, key ) {                                                         // 142\n        self.erroredFields[key].message = self.erroredFields[key].required ? self.fields[key].requiredMessage || \"*Required Field*\" : self.fields[key].message || \"*Invalid Input*\";\n    });                                                                                                          // 144\n};                                                                                                               // 145\n                                                                                                                 // 146\nForm.prototype.addFieldError = function(fieldName, ruleName, key){                                               // 147\n                                                                                                                 // 148\n    if(!this.erroredFields[fieldName]){                                                                          // 149\n        this.erroredFields[fieldName] = {};                                                                      // 150\n    }                                                                                                            // 151\n    if(key){                                                                                                     // 152\n        if(!this.erroredFields[fieldName][ruleName]){                                                            // 153\n            this.erroredFields[fieldName][ruleName] = [];                                                        // 154\n        }                                                                                                        // 155\n        this.erroredFields[fieldName][ruleName][key] = true;                                                     // 156\n    }else{                                                                                                       // 157\n       this.erroredFields[fieldName][ruleName] = true;                                                           // 158\n    }                                                                                                            // 159\n};                                                                                                               // 160\n                                                                                                                 // 161\nForm.prototype.checkFormat = function(fieldValue, fieldName, fieldFormat) {                                      // 162\n    var self = this;                                                                                             // 163\n    var format;                                                                                                  // 164\n                                                                                                                 // 165\n    if(_.isString(fieldFormat)){                                                                                 // 166\n        format=Formats[fieldFormat];                                                                             // 167\n    }else{                                                                                                       // 168\n        format = fieldFormat;                                                                                    // 169\n    }                                                                                                            // 170\n                                                                                                                 // 171\n    if(!format){                                                                                                 // 172\n        throw new Error(\"Unknown format:\"+fieldFormat);                                                          // 173\n    }                                                                                                            // 174\n    else {                                                                                                       // 175\n        if( _.isRegExp(format) ) {                                                                               // 176\n            // it's a regular expression                                                                         // 177\n            if(!format.test(fieldValue)){                                                                        // 178\n                self.addFieldError(fieldName, \"Invalid format\");                                                 // 179\n            }                                                                                                    // 180\n        } else {                                                                                                 // 181\n            // it's a function                                                                                   // 182\n            if(!format(fieldValue)){                                                                             // 183\n                self.addFieldError(fieldName, \"Invalid format\");                                                 // 184\n            }                                                                                                    // 185\n        }                                                                                                        // 186\n    }                                                                                                            // 187\n};                                                                                                               // 188\n                                                                                                                 // 189\nForm.prototype.formToObject = function(formFields){                                                              // 190\n    var formFieldsObject = {};                                                                                   // 191\n                                                                                                                 // 192\n    _(formFields).each( function( field ) {                                                                      // 193\n        var name = field.name;                                                                                   // 194\n        var value = field.fileSize ? _(field).pick(['fileType', 'fileSize', 'files']) : field.value;             // 195\n                                                                                                                 // 196\n        if(_.isUndefined(formFieldsObject[name])){                                                               // 197\n            formFieldsObject[name] = value;                                                                      // 198\n        }else if(_.isArray(formFieldsObject[name])){                                                             // 199\n            formFieldsObject[name].push(value);                                                                  // 200\n        }else{                                                                                                   // 201\n            formFieldsObject[name] = [formFieldsObject[name], value];                                            // 202\n        }                                                                                                        // 203\n    });                                                                                                          // 204\n                                                                                                                 // 205\n    return formFieldsObject;                                                                                     // 206\n};                                                                                                               // 207\n                                                                                                                 // 208\nvar transform = function (fieldValue, transformList) {                                                           // 209\n    _(transformList).each(function (transformName) {                                                             // 210\n        var transform=Transforms[transformName];                                                                 // 211\n        if (transform){                                                                                          // 212\n            fieldValue = transform(fieldValue);                                                                  // 213\n        }                                                                                                        // 214\n        else{                                                                                                    // 215\n            throw new Error(\"Invalid transform:\" + transformName);                                               // 216\n        }                                                                                                        // 217\n    });                                                                                                          // 218\n    return fieldValue;                                                                                           // 219\n};                                                                                                               // 220\n                                                                                                                 // 221\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// packages/copleykj:shower/js/shower.js                                                                         //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\nShower = function(optionsObject){                                                                                // 1\n    var selector = \"\";                                                                                           // 2\n    var formIdentifier = optionsObject.name || optionsObject.id;                                                 // 3\n                                                                                                                 // 4\n    optionsObject = _({onSuccess:Utils.successCallback, onFailure:Utils.failureCallback}).extend(optionsObject); // 5\n                                                                                                                 // 6\n    //Make sure they've got all the info we need and they haven't provided the same form information twice       // 7\n    if(!formIdentifier){                                                                                         // 8\n        throw new Error(\"Please specify the name of the form to validate.\");                                     // 9\n    }                                                                                                            // 10\n    if(!optionsObject.fields){                                                                                   // 11\n        throw new Error(\"Please specify which fields to validate.\");                                             // 12\n    }                                                                                                            // 13\n    if(Shower[formIdentifier]){                                                                                  // 14\n        throw new Error(\"Form is already being validated\");                                                      // 15\n    }                                                                                                            // 16\n                                                                                                                 // 17\n    //Create a new form object scoped to Shower.formName                                                         // 18\n    Shower[formIdentifier] = new Form(optionsObject.fields, optionsObject.aggregates, optionsObject.removeFields, optionsObject.onSuccess, optionsObject.onFailure);\n                                                                                                                 // 20\n    //if this is the browser, set up a submit event handler.                                                     // 21\n    if(Meteor.isClient){                                                                                         // 22\n        var events = {};                                                                                         // 23\n                                                                                                                 // 24\n        //decide which selector to use to grab the form handle                                                   // 25\n        if(optionsObject.name){                                                                                  // 26\n            selector = 'form[name='+formIdentifier+']';                                                          // 27\n        }else{                                                                                                   // 28\n            selector = '#'+formIdentifier;                                                                       // 29\n        }                                                                                                        // 30\n                                                                                                                 // 31\n                                                                                                                 // 32\n        if(!optionsObject.disableSubmit){                                                                        // 33\n                                                                                                                 // 34\n            if(optionsObject.template && _(optionsObject.template).isString()){                                  // 35\n                events['submit '+ selector] = function (event) {                                                 // 36\n                    var formFields = Shower.Utils.getFormData(event.target);                                     // 37\n                    Shower[formIdentifier].setSelector(event.target);                                            // 38\n                    event.preventDefault();                                                                      // 39\n                                                                                                                 // 40\n                    if(optionsObject.onSubmit){                                                                  // 41\n                        optionsObject.onSubmit(event);                                                           // 42\n                    }                                                                                            // 43\n                                                                                                                 // 44\n                    if(_(optionsObject.method).isFunction()){                                                    // 45\n                        optionsObject.method(formFields, this);                                                  // 46\n                    }else{                                                                                       // 47\n                        Meteor.call(optionsObject.method, formFields, this);                                     // 48\n                    }                                                                                            // 49\n                };                                                                                               // 50\n                Template[optionsObject.template].events(events);                                                 // 51\n            }else{                                                                                               // 52\n                $(function(){                                                                                    // 53\n                    //attach a submit event to the form                                                          // 54\n                    $(document.body).on('submit', selector, function (event) {                                   // 55\n                        event.preventDefault();                                                                  // 56\n                                                                                                                 // 57\n                        if(optionsObject.onSubmit){                                                              // 58\n                            optionsObject.onSubmit(event);                                                       // 59\n                        }                                                                                        // 60\n                                                                                                                 // 61\n                        var formFields = Utils.getFormData(this);                                                // 62\n                        Shower[formIdentifier].setSelector(event.target);                                        // 63\n                                                                                                                 // 64\n                        if(_(optionsObject.method).isFunction()){                                                // 65\n                            optionsObject.method(formFields);                                                    // 66\n                        }else{                                                                                   // 67\n                            Meteor.call(optionsObject.method, formFields);                                       // 68\n                        }                                                                                        // 69\n                    });                                                                                          // 70\n                });                                                                                              // 71\n            }                                                                                                    // 72\n                                                                                                                 // 73\n                                                                                                                 // 74\n        }                                                                                                        // 75\n                                                                                                                 // 76\n                                                                                                                 // 77\n    }                                                                                                            // 78\n};                                                                                                               // 79\n                                                                                                                 // 80\nShower.Rules = Rules;                                                                                            // 81\nShower.Transforms = Transforms;                                                                                  // 82\nShower.Formats = Formats;                                                                                        // 83\nShower.Aggregates = Aggregates;                                                                                  // 84\nShower.Utils = Utils;                                                                                            // 85\n                                                                                                                 // 86\nShower.registerAggregate = function (name, fn) {                                                                 // 87\n    if (Shower.Aggregates[name]) {                                                                               // 88\n        throw new Error(name + \" is already defined as a aggregate.\");                                           // 89\n    }                                                                                                            // 90\n    Shower.Aggregates[name] = fn;                                                                                // 91\n};                                                                                                               // 92\n                                                                                                                 // 93\nShower.registerFormat = function (name, fn) {                                                                    // 94\n    if (Shower.Formats[name]) {                                                                                  // 95\n        throw new Error(name + \" is already defined as a format.\");                                              // 96\n    }                                                                                                            // 97\n    Shower.Formats[name] = fn;                                                                                   // 98\n};                                                                                                               // 99\n                                                                                                                 // 100\nShower.registerRule = function (name, fn) {                                                                      // 101\n  if (Shower.Rules[name]) {                                                                                      // 102\n    throw new Error(name + \" is already defined as a rule.\");                                                    // 103\n  }                                                                                                              // 104\n  Shower.Rules[name] = fn;                                                                                       // 105\n};                                                                                                               // 106\n                                                                                                                 // 107\nShower.registerTransform = function (name, fn) {                                                                 // 108\n  if (Shower.Transforms[name]) {                                                                                 // 109\n    throw new Error(name + \" is already defined as a transform.\");                                               // 110\n  }                                                                                                              // 111\n  Shower.Transforms[name] = fn;                                                                                  // 112\n};                                                                                                               // 113\n                                                                                                                 // 114\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]