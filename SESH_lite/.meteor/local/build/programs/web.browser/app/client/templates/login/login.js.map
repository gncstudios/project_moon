{"version":3,"sources":["meteor://ðŸ’»app/client/templates/login/login.js"],"names":[],"mappings":"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G","file":"/client/templates/login/login.js","sourcesContent":["\nTemplate.login.onCreated(() => {\n  this.badFormResponse = new ReactiveVar(undefined);\n});\n    let that = this;\n\nTemplate.login.events({\n  'keydown #loginForm input': function(event) {\n    that.badFormResponse.set(undefined);\n  },\n  'submit #loginForm': function(event) {\n    event.preventDefault();\n\n    var email = event.target.email.value;\n    var password = event.target.password.value;\n    var rawFormData = event.target;\n    Meteor.loginWithPassword(email, password, (err) => {\n      if (err) {\n        that.badFormResponse.set(\"Invalid username or password.\");\n        // The user might not have been found, or their passwword\n        // could be incorrect. Inform the user that their\n        // login attempt has failed. \n      } else {\n        Router.go(\"/profile\");\n      }\n    });\n\n  }\n});\n\nTemplate.login.helpers({\n  formClass: () => {\n    return this.badFormResponse.get() ? \"has-error\" : \"\";\n  }, \n  badFormResponse: () => this.badFormResponse.get()\n});"]}