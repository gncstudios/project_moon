{"version":3,"sources":["meteor://ðŸ’»app/packages/jeremy_geocomplete/packages/jeremy_geocomplete.js"],"names":[],"mappingsfile":"/packages/jeremy_geocomplete.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jeremy:geocomplete/lib/jquery.geocomplete.js                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * jQuery Geocoding and Places Autocomplete Plugin - V 1.6.5                                                           // 2\n *                                                                                                                     // 3\n * @author Martin Kleppe <kleppe@ubilabs.net>, 2014                                                                    // 4\n * @author Ubilabs http://ubilabs.net, 2014                                                                            // 5\n * @license MIT License <http://www.opensource.org/licenses/mit-license.php>                                           // 6\n */                                                                                                                    // 7\n                                                                                                                       // 8\n// # $.geocomplete()                                                                                                   // 9\n// ## jQuery Geocoding and Places Autocomplete Plugin                                                                  // 10\n//                                                                                                                     // 11\n// * https://github.com/ubilabs/geocomplete/                                                                           // 12\n// * by Martin Kleppe <kleppe@ubilabs.net>                                                                             // 13\n                                                                                                                       // 14\n(function($, window, document, undefined){                                                                             // 15\n                                                                                                                       // 16\n  // ## Options                                                                                                        // 17\n  // The default options for this plugin.                                                                              // 18\n  //                                                                                                                   // 19\n  // * `map` - Might be a selector, an jQuery object or a DOM element. Default is `false` which shows no map.          // 20\n  // * `details` - The container that should be populated with data. Defaults to `false` which ignores the setting.    // 21\n  // * 'detailsScope' - Allows you to scope the 'details' container and have multiple geocomplete fields on one page. Must be a parent of the input. Default is 'null'\n  // * `location` - Location to initialize the map on. Might be an address `string` or an `array` with [latitude, longitude] or a `google.maps.LatLng`object. Default is `false` which shows a blank map.\n  // * `bounds` - Whether to snap geocode search to map bounds. Default: `true` if false search globally. Alternatively pass a custom `LatLngBounds object.\n  // * `autoselect` - Automatically selects the highlighted item or the first item from the suggestions list on Enter. // 25\n  // * `detailsAttribute` - The attribute's name to use as an indicator. Default: `\"name\"`                             // 26\n  // * `mapOptions` - Options to pass to the `google.maps.Map` constructor. See the full list [here](http://code.google.com/apis/maps/documentation/javascript/reference.html#MapOptions).\n  // * `mapOptions.zoom` - The inital zoom level. Default: `14`                                                        // 28\n  // * `mapOptions.scrollwheel` - Whether to enable the scrollwheel to zoom the map. Default: `false`                  // 29\n  // * `mapOptions.mapTypeId` - The map type. Default: `\"roadmap\"`                                                     // 30\n  // * `markerOptions` - The options to pass to the `google.maps.Marker` constructor. See the full list [here](http://code.google.com/apis/maps/documentation/javascript/reference.html#MarkerOptions).\n  // * `markerOptions.draggable` - If the marker is draggable. Default: `false`. Set to true to enable dragging.       // 32\n  // * `markerOptions.disabled` - Do not show marker. Default: `false`. Set to true to disable marker.                 // 33\n  // * `maxZoom` - The maximum zoom level too zoom in after a geocoding response. Default: `16`                        // 34\n  // * `types` - An array containing one or more of the supported types for the places request. Default: `['geocode']` See the full list [here](http://code.google.com/apis/maps/documentation/javascript/places.html#place_search_requests).\n  // * `blur` - Trigger geocode when input loses focus.                                                                // 36\n  // * `geocodeAfterResult` - If blur is set to true, choose whether to geocode if user has explicitly selected a result before blur.\n  // * `restoreValueAfterBlur` - Restores the input's value upon blurring. Default is `false` which ignores the setting.\n                                                                                                                       // 39\n  var defaults = {                                                                                                     // 40\n    bounds: true,                                                                                                      // 41\n    country: null,                                                                                                     // 42\n    map: false,                                                                                                        // 43\n    details: false,                                                                                                    // 44\n    detailsAttribute: \"name\",                                                                                          // 45\n    detailsScope: null,                                                                                                // 46\n    autoselect: true,                                                                                                  // 47\n    location: false,                                                                                                   // 48\n                                                                                                                       // 49\n    mapOptions: {                                                                                                      // 50\n      zoom: 14,                                                                                                        // 51\n      scrollwheel: false,                                                                                              // 52\n      mapTypeId: \"roadmap\"                                                                                             // 53\n    },                                                                                                                 // 54\n                                                                                                                       // 55\n    markerOptions: {                                                                                                   // 56\n      draggable: false                                                                                                 // 57\n    },                                                                                                                 // 58\n                                                                                                                       // 59\n    maxZoom: 16,                                                                                                       // 60\n    types: ['geocode'],                                                                                                // 61\n    blur: false,                                                                                                       // 62\n    geocodeAfterResult: false,                                                                                         // 63\n    restoreValueAfterBlur: false                                                                                       // 64\n  };                                                                                                                   // 65\n                                                                                                                       // 66\n  // See: [Geocoding Types](https://developers.google.com/maps/documentation/geocoding/#Types)                         // 67\n  // on Google Developers.                                                                                             // 68\n  var componentTypes = (\"street_address route intersection political \" +                                               // 69\n    \"country administrative_area_level_1 administrative_area_level_2 \" +                                               // 70\n    \"administrative_area_level_3 colloquial_area locality sublocality \" +                                              // 71\n    \"neighborhood premise subpremise postal_code natural_feature airport \" +                                           // 72\n    \"park point_of_interest post_box street_number floor room \" +                                                      // 73\n    \"lat lng viewport location \" +                                                                                     // 74\n    \"formatted_address location_type bounds\").split(\" \");                                                              // 75\n                                                                                                                       // 76\n  // See: [Places Details Responses](https://developers.google.com/maps/documentation/javascript/places#place_details_responses)\n  // on Google Developers.                                                                                             // 78\n  var placesDetails = (\"id place_id url website vicinity reference name rating \" +                                     // 79\n    \"international_phone_number icon formatted_phone_number\").split(\" \");                                              // 80\n                                                                                                                       // 81\n  // The actual plugin constructor.                                                                                    // 82\n  function GeoComplete(input, options) {                                                                               // 83\n                                                                                                                       // 84\n    this.options = $.extend(true, {}, defaults, options);                                                              // 85\n                                                                                                                       // 86\n    this.input = input;                                                                                                // 87\n    this.$input = $(input);                                                                                            // 88\n                                                                                                                       // 89\n    this._defaults = defaults;                                                                                         // 90\n    this._name = 'geocomplete';                                                                                        // 91\n                                                                                                                       // 92\n    this.init();                                                                                                       // 93\n  }                                                                                                                    // 94\n                                                                                                                       // 95\n  // Initialize all parts of the plugin.                                                                               // 96\n  $.extend(GeoComplete.prototype, {                                                                                    // 97\n    init: function(){                                                                                                  // 98\n      this.initMap();                                                                                                  // 99\n      this.initMarker();                                                                                               // 100\n      this.initGeocoder();                                                                                             // 101\n      this.initDetails();                                                                                              // 102\n      this.initLocation();                                                                                             // 103\n    },                                                                                                                 // 104\n                                                                                                                       // 105\n    // Initialize the map but only if the option `map` was set.                                                        // 106\n    // This will create a `map` within the given container                                                             // 107\n    // using the provided `mapOptions` or link to the existing map instance.                                           // 108\n    initMap: function(){                                                                                               // 109\n      if (!this.options.map){ return; }                                                                                // 110\n                                                                                                                       // 111\n      if (typeof this.options.map.setCenter == \"function\"){                                                            // 112\n        this.map = this.options.map;                                                                                   // 113\n        return;                                                                                                        // 114\n      }                                                                                                                // 115\n                                                                                                                       // 116\n      this.map = new google.maps.Map(                                                                                  // 117\n        $(this.options.map)[0],                                                                                        // 118\n        this.options.mapOptions                                                                                        // 119\n      );                                                                                                               // 120\n                                                                                                                       // 121\n      // add click event listener on the map                                                                           // 122\n      google.maps.event.addListener(                                                                                   // 123\n        this.map,                                                                                                      // 124\n        'click',                                                                                                       // 125\n        $.proxy(this.mapClicked, this)                                                                                 // 126\n      );                                                                                                               // 127\n                                                                                                                       // 128\n      // add dragend even listener on the map                                                                          // 129\n      google.maps.event.addListener(                                                                                   // 130\n        this.map,                                                                                                      // 131\n        'dragend',                                                                                                     // 132\n        $.proxy(this.mapDragged, this)                                                                                 // 133\n      );                                                                                                               // 134\n                                                                                                                       // 135\n      // add idle even listener on the map                                                                             // 136\n      google.maps.event.addListener(                                                                                   // 137\n        this.map,                                                                                                      // 138\n        'idle',                                                                                                        // 139\n        $.proxy(this.mapIdle, this)                                                                                    // 140\n      );                                                                                                               // 141\n                                                                                                                       // 142\n      google.maps.event.addListener(                                                                                   // 143\n        this.map,                                                                                                      // 144\n        'zoom_changed',                                                                                                // 145\n        $.proxy(this.mapZoomed, this)                                                                                  // 146\n      );                                                                                                               // 147\n    },                                                                                                                 // 148\n                                                                                                                       // 149\n    // Add a marker with the provided `markerOptions` but only                                                         // 150\n    // if the option was set. Additionally it listens for the `dragend` event                                          // 151\n    // to notify the plugin about changes.                                                                             // 152\n    initMarker: function(){                                                                                            // 153\n      if (!this.map){ return; }                                                                                        // 154\n      var options = $.extend(this.options.markerOptions, { map: this.map });                                           // 155\n                                                                                                                       // 156\n      if (options.disabled){ return; }                                                                                 // 157\n                                                                                                                       // 158\n      this.marker = new google.maps.Marker(options);                                                                   // 159\n                                                                                                                       // 160\n      google.maps.event.addListener(                                                                                   // 161\n        this.marker,                                                                                                   // 162\n        'dragend',                                                                                                     // 163\n        $.proxy(this.markerDragged, this)                                                                              // 164\n      );                                                                                                               // 165\n    },                                                                                                                 // 166\n                                                                                                                       // 167\n    // Associate the input with the autocompleter and create a geocoder                                                // 168\n    // to fall back when the autocompleter does not return a value.                                                    // 169\n    initGeocoder: function(){                                                                                          // 170\n                                                                                                                       // 171\n      // Indicates is user did select a result from the dropdown.                                                      // 172\n      var selected = false;                                                                                            // 173\n                                                                                                                       // 174\n      var options = {                                                                                                  // 175\n        types: this.options.types,                                                                                     // 176\n        bounds: this.options.bounds === true ? null : this.options.bounds,                                             // 177\n        componentRestrictions: this.options.componentRestrictions                                                      // 178\n      };                                                                                                               // 179\n                                                                                                                       // 180\n      if (this.options.country){                                                                                       // 181\n        options.componentRestrictions = {country: this.options.country};                                               // 182\n      }                                                                                                                // 183\n                                                                                                                       // 184\n      this.autocomplete = new google.maps.places.Autocomplete(                                                         // 185\n        this.input, options                                                                                            // 186\n      );                                                                                                               // 187\n                                                                                                                       // 188\n      this.geocoder = new google.maps.Geocoder();                                                                      // 189\n                                                                                                                       // 190\n      // Bind autocomplete to map bounds but only if there is a map                                                    // 191\n      // and `options.bindToMap` is set to true.                                                                       // 192\n      if (this.map && this.options.bounds === true){                                                                   // 193\n        this.autocomplete.bindTo('bounds', this.map);                                                                  // 194\n      }                                                                                                                // 195\n                                                                                                                       // 196\n      // Watch `place_changed` events on the autocomplete input field.                                                 // 197\n      google.maps.event.addListener(                                                                                   // 198\n        this.autocomplete,                                                                                             // 199\n        'place_changed',                                                                                               // 200\n        $.proxy(this.placeChanged, this)                                                                               // 201\n      );                                                                                                               // 202\n                                                                                                                       // 203\n      // Prevent parent form from being submitted if user hit enter.                                                   // 204\n      this.$input.on('keypress.' + this._name, function(event){                                                        // 205\n        if (event.keyCode === 13){ return false; }                                                                     // 206\n      });                                                                                                              // 207\n                                                                                                                       // 208\n      // Assume that if user types anything after having selected a result,                                            // 209\n      // the selected location is not valid any more.                                                                  // 210\n      if (this.options.geocodeAfterResult === true){                                                                   // 211\n        this.$input.bind('keypress.' + this._name, $.proxy(function(){                                                 // 212\n          if (event.keyCode != 9 && this.selected === true){                                                           // 213\n              this.selected = false;                                                                                   // 214\n          }                                                                                                            // 215\n        }, this));                                                                                                     // 216\n      }                                                                                                                // 217\n                                                                                                                       // 218\n      // Listen for \"geocode\" events and trigger find action.                                                          // 219\n      this.$input.bind('geocode.' + this._name, $.proxy(function(){                                                    // 220\n        this.find();                                                                                                   // 221\n      }, this));                                                                                                       // 222\n                                                                                                                       // 223\n      // Saves the previous input value                                                                                // 224\n      this.$input.bind('geocode:result.' + this._name, $.proxy(function(){                                             // 225\n        this.lastInputVal = this.$input.val();                                                                         // 226\n      }, this));                                                                                                       // 227\n                                                                                                                       // 228\n      // Trigger find action when input element is blurred out and user has                                            // 229\n      // not explicitly selected a result.                                                                             // 230\n      // (Useful for typing partial location and tabbing to the next field                                             // 231\n      // or clicking somewhere else.)                                                                                  // 232\n      if (this.options.blur === true){                                                                                 // 233\n        this.$input.on('blur.' + this._name, $.proxy(function(){                                                       // 234\n          if (this.options.geocodeAfterResult === true && this.selected === true) { return; }                          // 235\n                                                                                                                       // 236\n          if (this.options.restoreValueAfterBlur === true && this.selected === true) {                                 // 237\n            setTimeout($.proxy(this.restoreLastValue, this), 0);                                                       // 238\n          } else {                                                                                                     // 239\n            this.find();                                                                                               // 240\n          }                                                                                                            // 241\n        }, this));                                                                                                     // 242\n      }                                                                                                                // 243\n    },                                                                                                                 // 244\n                                                                                                                       // 245\n    // Prepare a given DOM structure to be populated when we got some data.                                            // 246\n    // This will cycle through the list of component types and map the                                                 // 247\n    // corresponding elements.                                                                                         // 248\n    initDetails: function(){                                                                                           // 249\n      if (!this.options.details){ return; }                                                                            // 250\n                                                                                                                       // 251\n      if(this.options.detailsScope) {                                                                                  // 252\n        var $details = $(this.input).parents(this.options.detailsScope).find(this.options.details);                    // 253\n      } else {                                                                                                         // 254\n        var $details = $(this.options.details);                                                                        // 255\n      }                                                                                                                // 256\n                                                                                                                       // 257\n      var attribute = this.options.detailsAttribute,                                                                   // 258\n        details = {};                                                                                                  // 259\n                                                                                                                       // 260\n      function setDetail(value){                                                                                       // 261\n        details[value] = $details.find(\"[\" +  attribute + \"=\" + value + \"]\");                                          // 262\n      }                                                                                                                // 263\n                                                                                                                       // 264\n      $.each(componentTypes, function(index, key){                                                                     // 265\n        setDetail(key);                                                                                                // 266\n        setDetail(key + \"_short\");                                                                                     // 267\n      });                                                                                                              // 268\n                                                                                                                       // 269\n      $.each(placesDetails, function(index, key){                                                                      // 270\n        setDetail(key);                                                                                                // 271\n      });                                                                                                              // 272\n                                                                                                                       // 273\n      this.$details = $details;                                                                                        // 274\n      this.details = details;                                                                                          // 275\n    },                                                                                                                 // 276\n                                                                                                                       // 277\n    // Set the initial location of the plugin if the `location` options was set.                                       // 278\n    // This method will care about converting the value into the right format.                                         // 279\n    initLocation: function() {                                                                                         // 280\n                                                                                                                       // 281\n      var location = this.options.location, latLng;                                                                    // 282\n                                                                                                                       // 283\n      if (!location) { return; }                                                                                       // 284\n                                                                                                                       // 285\n      if (typeof location == 'string') {                                                                               // 286\n        this.find(location);                                                                                           // 287\n        return;                                                                                                        // 288\n      }                                                                                                                // 289\n                                                                                                                       // 290\n      if (location instanceof Array) {                                                                                 // 291\n        latLng = new google.maps.LatLng(location[0], location[1]);                                                     // 292\n      }                                                                                                                // 293\n                                                                                                                       // 294\n      if (location instanceof google.maps.LatLng){                                                                     // 295\n        latLng = location;                                                                                             // 296\n      }                                                                                                                // 297\n                                                                                                                       // 298\n      if (latLng){                                                                                                     // 299\n        if (this.map){ this.map.setCenter(latLng); }                                                                   // 300\n        if (this.marker){ this.marker.setPosition(latLng); }                                                           // 301\n      }                                                                                                                // 302\n    },                                                                                                                 // 303\n                                                                                                                       // 304\n    destroy: function(){                                                                                               // 305\n      if (this.map) {                                                                                                  // 306\n        google.maps.event.clearInstanceListeners(this.map);                                                            // 307\n        google.maps.event.clearInstanceListeners(this.marker);                                                         // 308\n      }                                                                                                                // 309\n                                                                                                                       // 310\n      this.autocomplete.unbindAll();                                                                                   // 311\n      google.maps.event.clearInstanceListeners(this.autocomplete);                                                     // 312\n      google.maps.event.clearInstanceListeners(this.input);                                                            // 313\n      this.$input.removeData();                                                                                        // 314\n      this.$input.off(this._name);                                                                                     // 315\n      this.$input.unbind('.' + this._name);                                                                            // 316\n    },                                                                                                                 // 317\n                                                                                                                       // 318\n    // Look up a given address. If no `address` was specified it uses                                                  // 319\n    // the current value of the input.                                                                                 // 320\n    find: function(address){                                                                                           // 321\n      this.geocode({                                                                                                   // 322\n        address: address || this.$input.val()                                                                          // 323\n      });                                                                                                              // 324\n    },                                                                                                                 // 325\n                                                                                                                       // 326\n    // Requests details about a given location.                                                                        // 327\n    // Additionally it will bias the requests to the provided bounds.                                                  // 328\n    geocode: function(request){                                                                                        // 329\n      // Don't geocode if the requested address is empty                                                               // 330\n      if (!request.address) {                                                                                          // 331\n        return;                                                                                                        // 332\n      }                                                                                                                // 333\n      if (this.options.bounds && !request.bounds){                                                                     // 334\n        if (this.options.bounds === true){                                                                             // 335\n          request.bounds = this.map && this.map.getBounds();                                                           // 336\n        } else {                                                                                                       // 337\n          request.bounds = this.options.bounds;                                                                        // 338\n        }                                                                                                              // 339\n      }                                                                                                                // 340\n                                                                                                                       // 341\n      if (this.options.country){                                                                                       // 342\n        request.region = this.options.country;                                                                         // 343\n      }                                                                                                                // 344\n                                                                                                                       // 345\n      this.geocoder.geocode(request, $.proxy(this.handleGeocode, this));                                               // 346\n    },                                                                                                                 // 347\n                                                                                                                       // 348\n    // Get the selected result. If no result is selected on the list, then get                                         // 349\n    // the first result from the list.                                                                                 // 350\n    selectFirstResult: function() {                                                                                    // 351\n      //$(\".pac-container\").hide();                                                                                    // 352\n                                                                                                                       // 353\n      var selected = '';                                                                                               // 354\n      // Check if any result is selected.                                                                              // 355\n      if ($(\".pac-item-selected\")[0]) {                                                                                // 356\n        selected = '-selected';                                                                                        // 357\n      }                                                                                                                // 358\n                                                                                                                       // 359\n      // Get the first suggestion's text.                                                                              // 360\n      var $span1 = $(\".pac-container:last .pac-item\" + selected + \":first span:nth-child(2)\").text();                  // 361\n      var $span2 = $(\".pac-container:last .pac-item\" + selected + \":first span:nth-child(3)\").text();                  // 362\n                                                                                                                       // 363\n      // Adds the additional information, if available.                                                                // 364\n      var firstResult = $span1;                                                                                        // 365\n      if ($span2) {                                                                                                    // 366\n        firstResult += \" - \" + $span2;                                                                                 // 367\n      }                                                                                                                // 368\n                                                                                                                       // 369\n      this.$input.val(firstResult);                                                                                    // 370\n                                                                                                                       // 371\n      return firstResult;                                                                                              // 372\n    },                                                                                                                 // 373\n                                                                                                                       // 374\n    // Restores the input value using the previous value if it exists                                                  // 375\n    restoreLastValue: function() {                                                                                     // 376\n      if (this.lastInputVal){ this.$input.val(this.lastInputVal); }                                                    // 377\n    },                                                                                                                 // 378\n                                                                                                                       // 379\n    // Handles the geocode response. If more than one results was found                                                // 380\n    // it triggers the \"geocode:multiple\" events. If there was an error                                                // 381\n    // the \"geocode:error\" event is fired.                                                                             // 382\n    handleGeocode: function(results, status){                                                                          // 383\n      if (status === google.maps.GeocoderStatus.OK) {                                                                  // 384\n        var result = results[0];                                                                                       // 385\n        this.$input.val(result.formatted_address);                                                                     // 386\n        this.update(result);                                                                                           // 387\n                                                                                                                       // 388\n        if (results.length > 1){                                                                                       // 389\n          this.trigger(\"geocode:multiple\", results);                                                                   // 390\n        }                                                                                                              // 391\n                                                                                                                       // 392\n      } else {                                                                                                         // 393\n        this.trigger(\"geocode:error\", status);                                                                         // 394\n      }                                                                                                                // 395\n    },                                                                                                                 // 396\n                                                                                                                       // 397\n    // Triggers a given `event` with optional `arguments` on the input.                                                // 398\n    trigger: function(event, argument){                                                                                // 399\n      this.$input.trigger(event, [argument]);                                                                          // 400\n    },                                                                                                                 // 401\n                                                                                                                       // 402\n    // Set the map to a new center by passing a `geometry`.                                                            // 403\n    // If the geometry has a viewport, the map zooms out to fit the bounds.                                            // 404\n    // Additionally it updates the marker position.                                                                    // 405\n    center: function(geometry){                                                                                        // 406\n      if (geometry.viewport){                                                                                          // 407\n        this.map.fitBounds(geometry.viewport);                                                                         // 408\n        if (this.map.getZoom() > this.options.maxZoom){                                                                // 409\n          this.map.setZoom(this.options.maxZoom);                                                                      // 410\n        }                                                                                                              // 411\n      } else {                                                                                                         // 412\n        this.map.setZoom(this.options.maxZoom);                                                                        // 413\n        this.map.setCenter(geometry.location);                                                                         // 414\n      }                                                                                                                // 415\n                                                                                                                       // 416\n      if (this.marker){                                                                                                // 417\n        this.marker.setPosition(geometry.location);                                                                    // 418\n        this.marker.setAnimation(this.options.markerOptions.animation);                                                // 419\n      }                                                                                                                // 420\n    },                                                                                                                 // 421\n                                                                                                                       // 422\n    // Update the elements based on a single places or geocoding response                                              // 423\n    // and trigger the \"geocode:result\" event on the input.                                                            // 424\n    update: function(result){                                                                                          // 425\n                                                                                                                       // 426\n      if (this.map){                                                                                                   // 427\n        this.center(result.geometry);                                                                                  // 428\n      }                                                                                                                // 429\n                                                                                                                       // 430\n      if (this.$details){                                                                                              // 431\n        this.fillDetails(result);                                                                                      // 432\n      }                                                                                                                // 433\n                                                                                                                       // 434\n      this.trigger(\"geocode:result\", result);                                                                          // 435\n    },                                                                                                                 // 436\n                                                                                                                       // 437\n    // Populate the provided elements with new `result` data.                                                          // 438\n    // This will lookup all elements that has an attribute with the given                                              // 439\n    // component type.                                                                                                 // 440\n    fillDetails: function(result){                                                                                     // 441\n                                                                                                                       // 442\n      var data = {},                                                                                                   // 443\n        geometry = result.geometry,                                                                                    // 444\n        viewport = geometry.viewport,                                                                                  // 445\n        bounds = geometry.bounds;                                                                                      // 446\n                                                                                                                       // 447\n      // Create a simplified version of the address components.                                                        // 448\n      $.each(result.address_components, function(index, object){                                                       // 449\n        var name = object.types[0];                                                                                    // 450\n                                                                                                                       // 451\n        $.each(object.types, function(index, name){                                                                    // 452\n          data[name] = object.long_name;                                                                               // 453\n          data[name + \"_short\"] = object.short_name;                                                                   // 454\n        });                                                                                                            // 455\n      });                                                                                                              // 456\n                                                                                                                       // 457\n      // Add properties of the places details.                                                                         // 458\n      $.each(placesDetails, function(index, key){                                                                      // 459\n        data[key] = result[key];                                                                                       // 460\n      });                                                                                                              // 461\n                                                                                                                       // 462\n      // Add infos about the address and geometry.                                                                     // 463\n      $.extend(data, {                                                                                                 // 464\n        formatted_address: result.formatted_address,                                                                   // 465\n        location_type: geometry.location_type || \"PLACES\",                                                             // 466\n        viewport: viewport,                                                                                            // 467\n        bounds: bounds,                                                                                                // 468\n        location: geometry.location,                                                                                   // 469\n        lat: geometry.location.lat(),                                                                                  // 470\n        lng: geometry.location.lng()                                                                                   // 471\n      });                                                                                                              // 472\n                                                                                                                       // 473\n      // Set the values for all details.                                                                               // 474\n      $.each(this.details, $.proxy(function(key, $detail){                                                             // 475\n        var value = data[key];                                                                                         // 476\n        this.setDetail($detail, value);                                                                                // 477\n      }, this));                                                                                                       // 478\n                                                                                                                       // 479\n      this.data = data;                                                                                                // 480\n    },                                                                                                                 // 481\n                                                                                                                       // 482\n    // Assign a given `value` to a single `$element`.                                                                  // 483\n    // If the element is an input, the value is set, otherwise it updates                                              // 484\n    // the text content.                                                                                               // 485\n    setDetail: function($element, value){                                                                              // 486\n                                                                                                                       // 487\n      if (value === undefined){                                                                                        // 488\n        value = \"\";                                                                                                    // 489\n      } else if (typeof value.toUrlValue == \"function\"){                                                               // 490\n        value = value.toUrlValue();                                                                                    // 491\n      }                                                                                                                // 492\n                                                                                                                       // 493\n      if ($element.is(\":input\")){                                                                                      // 494\n        $element.val(value);                                                                                           // 495\n      } else {                                                                                                         // 496\n        $element.text(value);                                                                                          // 497\n      }                                                                                                                // 498\n    },                                                                                                                 // 499\n                                                                                                                       // 500\n    // Fire the \"geocode:dragged\" event and pass the new position.                                                     // 501\n    markerDragged: function(event){                                                                                    // 502\n      this.trigger(\"geocode:dragged\", event.latLng);                                                                   // 503\n    },                                                                                                                 // 504\n                                                                                                                       // 505\n    mapClicked: function(event) {                                                                                      // 506\n        this.trigger(\"geocode:click\", event.latLng);                                                                   // 507\n    },                                                                                                                 // 508\n                                                                                                                       // 509\n    // Fire the \"geocode:mapdragged\" event and pass the current position of the map center.                            // 510\n    mapDragged: function(event) {                                                                                      // 511\n      this.trigger(\"geocode:mapdragged\", this.map.getCenter());                                                        // 512\n    },                                                                                                                 // 513\n                                                                                                                       // 514\n    // Fire the \"geocode:idle\" event and pass the current position of the map center.                                  // 515\n    mapIdle: function(event) {                                                                                         // 516\n      this.trigger(\"geocode:idle\", this.map.getCenter());                                                              // 517\n    },                                                                                                                 // 518\n                                                                                                                       // 519\n    mapZoomed: function(event) {                                                                                       // 520\n      this.trigger(\"geocode:zoom\", this.map.getZoom());                                                                // 521\n    },                                                                                                                 // 522\n                                                                                                                       // 523\n    // Restore the old position of the marker to the last knwon location.                                              // 524\n    resetMarker: function(){                                                                                           // 525\n      this.marker.setPosition(this.data.location);                                                                     // 526\n      this.setDetail(this.details.lat, this.data.location.lat());                                                      // 527\n      this.setDetail(this.details.lng, this.data.location.lng());                                                      // 528\n    },                                                                                                                 // 529\n                                                                                                                       // 530\n    // Update the plugin after the user has selected an autocomplete entry.                                            // 531\n    // If the place has no geometry it passes it to the geocoder.                                                      // 532\n    placeChanged: function(){                                                                                          // 533\n      var place = this.autocomplete.getPlace();                                                                        // 534\n      this.selected = true;                                                                                            // 535\n                                                                                                                       // 536\n      if (!place.geometry){                                                                                            // 537\n        if (this.options.autoselect) {                                                                                 // 538\n          // Automatically selects the highlighted item or the first item from the                                     // 539\n          // suggestions list.                                                                                         // 540\n          var autoSelection = this.selectFirstResult();                                                                // 541\n          this.find(autoSelection);                                                                                    // 542\n        }                                                                                                              // 543\n      } else {                                                                                                         // 544\n        // Use the input text if it already gives geometry.                                                            // 545\n        this.update(place);                                                                                            // 546\n      }                                                                                                                // 547\n    }                                                                                                                  // 548\n  });                                                                                                                  // 549\n                                                                                                                       // 550\n  // A plugin wrapper around the constructor.                                                                          // 551\n  // Pass `options` with all settings that are different from the default.                                             // 552\n  // The attribute is used to prevent multiple instantiations of the plugin.                                           // 553\n  $.fn.geocomplete = function(options) {                                                                               // 554\n                                                                                                                       // 555\n    var attribute = 'plugin_geocomplete';                                                                              // 556\n                                                                                                                       // 557\n    // If you call `.geocomplete()` with a string as the first parameter                                               // 558\n    // it returns the corresponding property or calls the method with the                                              // 559\n    // following arguments.                                                                                            // 560\n    if (typeof options == \"string\"){                                                                                   // 561\n                                                                                                                       // 562\n      var instance = $(this).data(attribute) || $(this).geocomplete().data(attribute),                                 // 563\n        prop = instance[options];                                                                                      // 564\n                                                                                                                       // 565\n      if (typeof prop == \"function\"){                                                                                  // 566\n        prop.apply(instance, Array.prototype.slice.call(arguments, 1));                                                // 567\n        return $(this);                                                                                                // 568\n      } else {                                                                                                         // 569\n        if (arguments.length == 2){                                                                                    // 570\n          prop = arguments[1];                                                                                         // 571\n        }                                                                                                              // 572\n        return prop;                                                                                                   // 573\n      }                                                                                                                // 574\n    } else {                                                                                                           // 575\n      return this.each(function() {                                                                                    // 576\n        // Prevent against multiple instantiations.                                                                    // 577\n        var instance = $.data(this, attribute);                                                                        // 578\n        if (!instance) {                                                                                               // 579\n          instance = new GeoComplete( this, options );                                                                 // 580\n          $.data(this, attribute, instance);                                                                           // 581\n        }                                                                                                              // 582\n      });                                                                                                              // 583\n    }                                                                                                                  // 584\n  };                                                                                                                   // 585\n                                                                                                                       // 586\n})( jQuery, window, document );                                                                                        // 587\n                                                                                                                       // 588\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}