{"version":3,"sources":["meteor://ðŸ’»app/packages/http/packages/http.js"],"names":[],"mappingsfile":"/packages/http.js","sourcesContent":["(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/http/httpcall_common.js                                                                                 //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nmakeErrorByStatus = function(statusCode, content) {                                                                 // 1\n  var MAX_LENGTH = 500; // if you change this, also change the appropriate test                                     // 2\n                                                                                                                    // 3\n  var truncate = function(str, length) {                                                                            // 4\n    return str.length > length ? str.slice(0, length) + '...' : str;                                                // 5\n  };                                                                                                                // 6\n                                                                                                                    // 7\n  var contentToCheck = typeof content == \"string\" ? content : content.toString();                                   // 8\n                                                                                                                    // 9\n  var message = \"failed [\" + statusCode + \"]\";                                                                      // 10\n                                                                                                                    // 11\n  if (contentToCheck) {                                                                                             // 12\n    message += \" \" + truncate(contentToCheck.replace(/\\n/g, \" \"), MAX_LENGTH);                                      // 13\n  }                                                                                                                 // 14\n                                                                                                                    // 15\n  return new Error(message);                                                                                        // 16\n};                                                                                                                  // 17\n                                                                                                                    // 18\n                                                                                                                    // 19\n// Fill in `response.data` if the content-type is JSON.                                                             // 20\npopulateData = function(response) {                                                                                 // 21\n  // Read Content-Type header, up to a ';' if there is one.                                                         // 22\n  // A typical header might be \"application/json; charset=utf-8\"                                                    // 23\n  // or just \"application/json\".                                                                                    // 24\n  var contentType = (response.headers['content-type'] || ';').split(';')[0];                                        // 25\n                                                                                                                    // 26\n  // Only try to parse data as JSON if server sets correct content type.                                            // 27\n  if (_.include(['application/json', 'text/javascript',                                                             // 28\n      'application/javascript', 'application/x-javascript'], contentType)) {                                        // 29\n    try {                                                                                                           // 30\n      response.data = JSON.parse(response.content);                                                                 // 31\n    } catch (err) {                                                                                                 // 32\n      response.data = null;                                                                                         // 33\n    }                                                                                                               // 34\n  } else {                                                                                                          // 35\n    response.data = null;                                                                                           // 36\n  }                                                                                                                 // 37\n};                                                                                                                  // 38\n                                                                                                                    // 39\nHTTP = {};                                                                                                          // 40\n                                                                                                                    // 41\n/**                                                                                                                 // 42\n * @summary Send an HTTP `GET` request. Equivalent to calling [`HTTP.call`](#http_call) with \"GET\" as the first argument.\n * @param {String} url The URL to which the request should be sent.                                                 // 44\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).                                    // 45\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere                                                                                                  // 47\n */                                                                                                                 // 48\nHTTP.get = function (/* varargs */) {                                                                               // 49\n  return HTTP.call.apply(this, [\"GET\"].concat(_.toArray(arguments)));                                               // 50\n};                                                                                                                  // 51\n                                                                                                                    // 52\n/**                                                                                                                 // 53\n * @summary Send an HTTP `POST` request. Equivalent to calling [`HTTP.call`](#http_call) with \"POST\" as the first argument.\n * @param {String} url The URL to which the request should be sent.                                                 // 55\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).                                    // 56\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere                                                                                                  // 58\n */                                                                                                                 // 59\nHTTP.post = function (/* varargs */) {                                                                              // 60\n  return HTTP.call.apply(this, [\"POST\"].concat(_.toArray(arguments)));                                              // 61\n};                                                                                                                  // 62\n                                                                                                                    // 63\n/**                                                                                                                 // 64\n * @summary Send an HTTP `PUT` request. Equivalent to calling [`HTTP.call`](#http_call) with \"PUT\" as the first argument.\n * @param {String} url The URL to which the request should be sent.                                                 // 66\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).                                    // 67\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere                                                                                                  // 69\n */                                                                                                                 // 70\nHTTP.put = function (/* varargs */) {                                                                               // 71\n  return HTTP.call.apply(this, [\"PUT\"].concat(_.toArray(arguments)));                                               // 72\n};                                                                                                                  // 73\n                                                                                                                    // 74\n/**                                                                                                                 // 75\n * @summary Send an HTTP `DELETE` request. Equivalent to calling [`HTTP.call`](#http_call) with \"DELETE\" as the first argument. (Named `del` to avoid conflic with the Javascript keyword `delete`)\n * @param {String} url The URL to which the request should be sent.                                                 // 77\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).                                    // 78\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere                                                                                                  // 80\n */                                                                                                                 // 81\nHTTP.del = function (/* varargs */) {                                                                               // 82\n  return HTTP.call.apply(this, [\"DELETE\"].concat(_.toArray(arguments)));                                            // 83\n};                                                                                                                  // 84\n                                                                                                                    // 85\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/http/httpcall_server.js                                                                                 //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nvar path = Npm.require('path');                                                                                     // 1\nvar request = Npm.require('request');                                                                               // 2\nvar url_util = Npm.require('url');                                                                                  // 3\n                                                                                                                    // 4\nHTTPInternals = {                                                                                                   // 5\n  NpmModules: {                                                                                                     // 6\n    request: {                                                                                                      // 7\n      version: Npm.require('request/package.json').version,                                                         // 8\n      module: request                                                                                               // 9\n    }                                                                                                               // 10\n  }                                                                                                                 // 11\n};                                                                                                                  // 12\n                                                                                                                    // 13\n// _call always runs asynchronously; HTTP.call, defined below,                                                      // 14\n// wraps _call and runs synchronously when no callback is provided.                                                 // 15\nvar _call = function(method, url, options, callback) {                                                              // 16\n                                                                                                                    // 17\n  ////////// Process arguments //////////                                                                           // 18\n                                                                                                                    // 19\n  if (! callback && typeof options === \"function\") {                                                                // 20\n    // support (method, url, callback) argument list                                                                // 21\n    callback = options;                                                                                             // 22\n    options = null;                                                                                                 // 23\n  }                                                                                                                 // 24\n                                                                                                                    // 25\n  options = options || {};                                                                                          // 26\n                                                                                                                    // 27\n  if (_.has(options, 'beforeSend')) {                                                                               // 28\n    throw new Error(\"Option beforeSend not supported on server.\");                                                  // 29\n  }                                                                                                                 // 30\n                                                                                                                    // 31\n  method = (method || \"\").toUpperCase();                                                                            // 32\n                                                                                                                    // 33\n  if (! /^https?:\\/\\//.test(url))                                                                                   // 34\n    throw new Error(\"url must be absolute and start with http:// or https://\");                                     // 35\n                                                                                                                    // 36\n  var headers = {};                                                                                                 // 37\n                                                                                                                    // 38\n  var content = options.content;                                                                                    // 39\n  if (options.data) {                                                                                               // 40\n    content = JSON.stringify(options.data);                                                                         // 41\n    headers['Content-Type'] = 'application/json';                                                                   // 42\n  }                                                                                                                 // 43\n                                                                                                                    // 44\n                                                                                                                    // 45\n  var paramsForUrl, paramsForBody;                                                                                  // 46\n  if (content || method === \"GET\" || method === \"HEAD\")                                                             // 47\n    paramsForUrl = options.params;                                                                                  // 48\n  else                                                                                                              // 49\n    paramsForBody = options.params;                                                                                 // 50\n                                                                                                                    // 51\n  var newUrl = URL._constructUrl(url, options.query, paramsForUrl);                                                 // 52\n                                                                                                                    // 53\n  if (options.auth) {                                                                                               // 54\n    if (options.auth.indexOf(':') < 0)                                                                              // 55\n      throw new Error('auth option should be of the form \"username:password\"');                                     // 56\n    headers['Authorization'] = \"Basic \"+                                                                            // 57\n      (new Buffer(options.auth, \"ascii\")).toString(\"base64\");                                                       // 58\n  }                                                                                                                 // 59\n                                                                                                                    // 60\n  if (paramsForBody) {                                                                                              // 61\n    content = URL._encodeParams(paramsForBody);                                                                     // 62\n    headers['Content-Type'] = \"application/x-www-form-urlencoded\";                                                  // 63\n  }                                                                                                                 // 64\n                                                                                                                    // 65\n  _.extend(headers, options.headers || {});                                                                         // 66\n                                                                                                                    // 67\n  // wrap callback to add a 'response' property on an error, in case                                                // 68\n  // we have both (http 4xx/5xx error, which has a response payload)                                                // 69\n  callback = (function(callback) {                                                                                  // 70\n    return function(error, response) {                                                                              // 71\n      if (error && response)                                                                                        // 72\n        error.response = response;                                                                                  // 73\n      callback(error, response);                                                                                    // 74\n    };                                                                                                              // 75\n  })(callback);                                                                                                     // 76\n                                                                                                                    // 77\n  // safety belt: only call the callback once.                                                                      // 78\n  callback = _.once(callback);                                                                                      // 79\n                                                                                                                    // 80\n                                                                                                                    // 81\n  ////////// Kickoff! //////////                                                                                    // 82\n                                                                                                                    // 83\n  // Allow users to override any request option with the npmRequestOptions                                          // 84\n  // option.                                                                                                        // 85\n  var reqOptions = _.extend({                                                                                       // 86\n    url: newUrl,                                                                                                    // 87\n    method: method,                                                                                                 // 88\n    encoding: \"utf8\",                                                                                               // 89\n    jar: false,                                                                                                     // 90\n    timeout: options.timeout,                                                                                       // 91\n    body: content,                                                                                                  // 92\n    followRedirect: options.followRedirects,                                                                        // 93\n    // Follow redirects on non-GET requests                                                                         // 94\n    // also. (https://github.com/meteor/meteor/issues/2808)                                                         // 95\n    followAllRedirects: options.followRedirects,                                                                    // 96\n    headers: headers                                                                                                // 97\n  }, options.npmRequestOptions || {});                                                                              // 98\n                                                                                                                    // 99\n  request(reqOptions, function(error, res, body) {                                                                  // 100\n    var response = null;                                                                                            // 101\n                                                                                                                    // 102\n    if (! error) {                                                                                                  // 103\n                                                                                                                    // 104\n      response = {};                                                                                                // 105\n      response.statusCode = res.statusCode;                                                                         // 106\n      response.content = body;                                                                                      // 107\n      response.headers = res.headers;                                                                               // 108\n                                                                                                                    // 109\n      populateData(response);                                                                                       // 110\n                                                                                                                    // 111\n      if (response.statusCode >= 400)                                                                               // 112\n        error = makeErrorByStatus(response.statusCode, response.content);                                           // 113\n    }                                                                                                               // 114\n                                                                                                                    // 115\n    callback(error, response);                                                                                      // 116\n                                                                                                                    // 117\n  });                                                                                                               // 118\n};                                                                                                                  // 119\n                                                                                                                    // 120\nHTTP.call = Meteor.wrapAsync(_call);                                                                                // 121\n                                                                                                                    // 122\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/http/deprecated.js                                                                                      //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n// The HTTP object used to be called Meteor.http.                                                                   // 1\n// XXX COMPAT WITH 0.6.4                                                                                            // 2\nMeteor.http = HTTP;                                                                                                 // 3\n                                                                                                                    // 4\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}